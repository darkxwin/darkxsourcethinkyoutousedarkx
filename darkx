local Release = "Beta 8"
local NotificationDuration = 6.5
local RayfieldFolder = "Rayfield"
local ConfigurationFolder = RayfieldFolder .. "/Configurations"
local ConfigurationExtension = ".rfld"
if loadstring(game:HttpGet "https://pastebin.com/raw/gfRaKGuw")() ~= 'welcome to use dark x' then
    while true do

    end
end

repeat
    wait()
until game:IsLoaded()
spawn(function()
    while wait() do
        pcall(function()
            _G["玩家"] = game.Players
            _G["自己"] = _G["玩家"].LocalPlayer
            _G["自己角色"] = _G["自己"].Character
            _G["自己身体"] = _G["自己角色"].Humanoid
            _G["自己的方块"] = _G["自己角色"].HumanoidRootPart
            _G["土地"] = game.Workspace.Properties
        end)

    end
end)
wait(0.2)


game:GetService("ReplicatedStorage"):WaitForChild("LoadSaveRequests"):WaitForChild("GetMetaData"):InvokeServer( _G["自己"])

local library, Mouse = {}, game:GetService "Players".LocalPlayer:GetMouse()
_G["菜单"] = {
    ["传送的玩家"] = nil,
    ["正在飞行"] = false,
    ["飞行速度"] = 200,
    ["飞行"] = false,
    ["终日白天"] = false,
    ["终日黑夜"] = false,
    ["消除雾"] = false,
    ["选择的树"] = {"Generic"},
    ["带来树的数量"] = 1,
    ["树放置的地点"] = nil,
    ["大力"] = false,
    ["停止砍树"] = false,
    ['存档'] = 1,
    ['快速加载'] = false,
    ['擦去的东西'] = "Structure",
    ['擦去的玩家'] = _G['自己'].Name,
    ['自动购买的地点'] = nil,
    ['自动购买的数量'] = 1,
    ['自动购买的物品'] = nil,
    ['自动购买停止'] = false,
    ['商店名字'] = 'All',
    ['行走速度'] = 50,
    ['跳跃提升'] = 100,
    ['复制斧头数量'] = 1,
    ['自动复制斧头'] = false,
    ["传送的玩家"] = _G['自己'].Name,
    ['传送停止'] = false,
    ['物品框'] = nil,
    ['停止整理'] = false,
    ['正在处理树'] = false,
    ['正在整理物品'] = false,
    ['整理物品X'] = 5,
    ['整理物品Z'] = 5,
    ['木头竖着传送'] = false,
    ['带来幻影拿斧头'] = nil,
    ['汽车的颜色'] = nil,
    ['停止生成车'] = false,
    ['正在生成车'] = false,
    ['自动填充的树'] = nil,
    ['油漆的锯木机']=nil,
    ['复制土地到玩家']=nil,
    ['复制的存档']=_G['自己'].CurrentSaveSlot.Value,
    ['复制基地等待加载']=false,
}
library.Destroyed, library.Connections, library.flags, library.Tabs, library.CurrentTab, library.CurrentColorPicker, library.CurrentNoti =
    false, {}, {}, {}, nil, nil, nil

local IsSwitchingTab
function SwitchTab(Tab, Holder)
    if IsSwitchingTab then
        return
    end

    if library.CurrentTab and library.CurrentTab[1] == Tab then
        return
    end

    if not library.CurrentTab then
        library.CurrentTab = {Tab, Holder}
        Tab.Title.TextTransparency = 0
        Tab.Icon.ImageTransparency = 0
        Holder.Visible = true
        return
    end

    IsSwitchingTab = true
    library.CurrentTab[2].Visible = false
    Tween(Tab.Icon, .2, {
        ImageTransparency = 0
    })
    Tween(Tab.Title, .2, {
        TextTransparency = 0
    })
    Tween(library.CurrentTab[1].Icon, .2, {
        ImageTransparency = 0.65
    })
    Tween(library.CurrentTab[1].Title, .2, {
        TextTransparency = 0.65
    })
    Holder.Visible = true
    task.wait(.2)
    library.CurrentTab = {Tab, Holder}
    IsSwitchingTab = false
end

function Drag(frame, hold)
    if not hold then
        hold = frame
    end
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale,
            startPos.Y.Offset + delta.Y)
    end

    hold.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function Pop(obj)
    local OldSize = obj.Size

    obj.Size = obj.Size - UDim2.new(0, 10, 0, 10)

    obj.TextSize = 0

    Tween(obj, .2, {
        Size = OldSize
    })

    Tween(obj, .2, {
        TextSize = 15
    })

    task.wait(.2)

    Tween(obj, .2, {
        TextSize = 13
    })
end

function Tween(Obj, Duration, Props, ...)
    game:GetService "TweenService":Create(Obj, TweenInfo.new(Duration, ...), Props):Play()
end

function library:GetState(Value)
    return library.flags[Value].State
end

function library:UpdateToggle(Flag, Value)
    local Value = Value or not library:GetState(Flag)

    if Value == library:GetState(Flag) then
        return
    end

    print "Test1"

    library.flags[Flag]:SetState(Value)
end

---~library_Source~---

function library:Create(title)
    assert(title, "A title is required")

    local themes = {
        Background = Color3.fromRGB(24, 24, 24),
        Accent = Color3.fromRGB(10, 10, 10),
        LightContrast = Color3.fromRGB(20, 20, 20),
        DarkContrast = Color3.fromRGB(14, 14, 14),
        TextColor = Color3.fromRGB(255, 255, 255),
        Glow = Color3.fromRGB(0, 0, 0)
    }

    local Aurora = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local MainC = Instance.new("UICorner")
    local Top = Instance.new("Frame")
    local TopC = Instance.new("UICorner")
    local Title = Instance.new("TextLabel")
    local TopBar = Instance.new("Frame")
    local Side = Instance.new("Frame")
    local SideC = Instance.new("UICorner")
    local SideBar = Instance.new("Frame")
    local Glow = Instance.new("ImageLabel")
    local TabHolder = Instance.new("ScrollingFrame")
    local TabHolderLL = Instance.new("UIListLayout")
    local Close = Instance.new("ScreenGui")
    Aurora.Name = "Dark X"
    Aurora.Parent = game:GetService "CoreGui"
    Aurora.ResetOnSpawn = false
    Close.Name = "Close"
    Close.Parent = game:GetService "CoreGui"
    Close.ResetOnSpawn = false
    Main.Name = "Main"
    Main.Parent = Aurora
    Main.BackgroundColor3 = themes.Background
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.352971852, 0, 0.3160173, 0)
    Main.Size = UDim2.new(0, 564, 0, 340)
    Main.ClipsDescendants = false
    Main.Active = true
    Main.Draggable = true
    local Open = Instance.new("TextButton")
    Open.Name = "Open"
    Open.Parent = Close
    Open.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    Open.Position = UDim2.new(0.00829315186, 0, 0.31107837, 0)
    Open.Size = UDim2.new(0, 61, 0, 32)
    Open.Font = Enum.Font.SourceSans
    Open.Text = "Open/Close"
    Open.TextColor3 = Color3.fromRGB(255, 255, 255)
    Open.TextSize = 14.000
    Open.Active = true
    Open.Draggable = true
    Open.MouseButton1Click:Connect(function()
        Aurora.Enabled = not Aurora.Enabled
    end)
    MainC.CornerRadius = UDim.new(0, 5)
    MainC.Name = "MainC"
    MainC.Parent = Main

    Top.Name = "Top"
    Top.Parent = Main
    Top.BackgroundColor3 = themes.Accent
    Top.BorderSizePixel = 0
    Top.Position = UDim2.new(0.000134948292, 0, -0.00162963872, 0)
    Top.Size = UDim2.new(0, 563, 0, 30)
    Top.ZIndex = 3

    TopC.CornerRadius = UDim.new(0, 5)
    TopC.Name = "TopC"
    TopC.Parent = Top

    Title.Name = "Title"
    Title.Parent = Top
    Title.BackgroundColor3 = themes.TextColor
    Title.BackgroundTransparency = 1.000
    Title.BorderSizePixel = 0
    Title.Position = UDim2.new(1.08410582e-07, 0, 0.0333333351, 0)
    Title.Size = UDim2.new(0, 553, 0, 27)
    Title.ZIndex = 3
    Title.Font = Enum.Font.GothamBold
    Title.Text = string.format("  %s", title)
    Title.TextColor3 = themes.TextColor
    Title.TextSize = 15.000
    Title.TextXAlignment = Enum.TextXAlignment.Left

    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.BackgroundColor3 = themes.Accent
    TopBar.BorderSizePixel = 0
    TopBar.Position = UDim2.new(0.001907998, 0, 0.0513115376, 0)
    TopBar.Size = UDim2.new(0, 562, 0, 12)
    TopBar.ZIndex = 2

    Side.Name = "Side"
    Side.Parent = Main
    Side.BackgroundColor3 = themes.DarkContrast
    Side.BorderSizePixel = 0
    Side.Position = UDim2.new(0.001907998, 0, 0.00311943493, 0)
    Side.Size = UDim2.new(0, 130, 0, 338)

    SideC.CornerRadius = UDim.new(0, 5)
    SideC.Name = "SideC"
    SideC.Parent = Side

    SideBar.Name = "SideBar"
    SideBar.Parent = Main
    SideBar.BackgroundColor3 = themes.DarkContrast
    SideBar.BorderSizePixel = 0
    SideBar.Position = UDim2.new(0.211127862, 0, 0.00311943493, 0)
    SideBar.Size = UDim2.new(0, 12, 0, 338)

    Glow.Name = "Glow"
    Glow.Parent = Main
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1.000
    Glow.BorderSizePixel = 0
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.Size = UDim2.new(1, 47, 1, 47)
    Glow.ZIndex = 0
    Glow.Image = "rbxassetid://6014261993"
    Glow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Glow.ImageTransparency = 0.500
    Glow.ScaleType = Enum.ScaleType.Slice
    Glow.SliceCenter = Rect.new(49, 49, 450, 450)

    TabHolder.Name = "TabHolder"
    TabHolder.Parent = Side
    TabHolder.Active = true
    TabHolder.BackgroundColor3 = themes.TextColor
    TabHolder.BackgroundTransparency = 1.000
    TabHolder.BorderSizePixel = 0
    TabHolder.Position = UDim2.new(0.0384615399, 0, 0.115384616, 0)
    TabHolder.Size = UDim2.new(0, 119, 0, 294)
    TabHolder.ZIndex = 2
    TabHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabHolder.ScrollBarThickness = 1

    TabHolderLL.Name = "TabHolderLL"
    TabHolderLL.Parent = TabHolder
    TabHolderLL.SortOrder = Enum.SortOrder.LayoutOrder
    TabHolderLL.Padding = UDim.new(0, 10)

    function library:Notify(title, message, options, callback)
        local callback = callback or function()
        end
        local options = options or false
        assert(title, "A title is required")
        assert(message, "A message is required")

        local Notify = Instance.new("Frame")
        local NotifyC = Instance.new("UICorner")
        local Glow = Instance.new("ImageLabel")
        local Text = Instance.new("TextLabel")
        local Title = Instance.new("TextLabel")
        local Accept = Instance.new("ImageButton")
        local Decline = Instance.new("ImageButton")
        local Flash = Instance.new("Frame")
        local FlashC = Instance.new("UICorner")

        Notify.Name = "Notify"
        Notify.Parent = Aurora
        Notify.BackgroundColor3 = themes.Background
        Notify.BorderSizePixel = 0
        Notify.ClipsDescendants = true
        Notify.Position = library.CurrentNoti and library.CurrentNoti.Position or UDim2.new(0, 0, 0, 0)
        Notify.Size = UDim2.new(0, 0, 0, 60)

        NotifyC.CornerRadius = UDim.new(0, 5)
        NotifyC.Name = "NotifyC"
        NotifyC.Parent = Notify

        Glow.Name = "Glow"
        Glow.Parent = Notify
        Glow.AnchorPoint = Vector2.new(0.5, 0.5)
        Glow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Glow.BackgroundTransparency = 1.000
        Glow.BorderSizePixel = 0
        Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
        Glow.Size = UDim2.new(1, 47, 1, 47)
        Glow.ZIndex = 0
        Glow.Image = "rbxassetid://6014261993"
        Glow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        Glow.ImageTransparency = 0.500
        Glow.ScaleType = Enum.ScaleType.Slice
        Glow.SliceCenter = Rect.new(49, 49, 450, 450)

        Text.Name = "Text"
        Text.Parent = Notify
        Text.BackgroundTransparency = 1.000
        Text.Position = UDim2.new(0, 10, 1, -24)
        Text.Size = UDim2.new(1, -40, 0, 16)
        Text.ZIndex = 4
        Text.Font = Enum.Font.Gotham
        Text.Text = message
        Text.TextColor3 = themes.TextColor
        Text.TextSize = 12.000
        Text.TextXAlignment = Enum.TextXAlignment.Left

        Title.Name = "Title"
        Title.Parent = Notify
        Title.BackgroundTransparency = 1.000
        Title.Position = UDim2.new(0, 10, 0, 8)
        Title.Size = UDim2.new(1, -40, 0, 16)
        Title.ZIndex = 4
        Title.Font = Enum.Font.GothamMedium
        Title.Text = title
        Title.TextColor3 = themes.TextColor
        Title.TextSize = 14.000
        Title.TextXAlignment = Enum.TextXAlignment.Left

        if options then
            Accept.Name = "Accept"
            Accept.Parent = Notify
            Accept.BackgroundTransparency = 1.000
            Accept.Position = UDim2.new(1, -26, 0, 8)
            Accept.Size = UDim2.new(0, 16, 0, 16)
            Accept.ZIndex = 4
            Accept.Image = "rbxassetid://5012538259"

            Decline.Name = "Decline"
            Decline.Parent = Notify
            Decline.BackgroundTransparency = 1.000
            Decline.Position = UDim2.new(1, -26, 1, -24)
            Decline.Size = UDim2.new(0, 16, 0, 16)
            Decline.ZIndex = 4
            Decline.Image = "rbxassetid://5012538583"
        end

        Flash.Name = "Flash"
        Flash.Parent = Notify
        Flash.BackgroundColor3 = themes.TextColor
        Flash.BorderSizePixel = 0
        Flash.ClipsDescendants = true
        Flash.Position = UDim2.new(-0.008, 0, -0.014, 0)
        Flash.Size = UDim2.new(0, 0, 0, 60)
        Flash.ZIndex = 4

        FlashC.CornerRadius = UDim.new(0, 5)
        FlashC.Name = "FlashC"
        FlashC.Parent = Flash

        Drag(Notify)

        local textsize = game:GetService("TextService"):GetTextSize(message, 12, Enum.Font.Gotham,
            Vector2.new(math.huge, 16))

        local function CloseNoti(Notify, Flash)
            Tween(Flash, .2, {
                Size = Notify.Size
            })
            task.wait(.2)
            Tween(Notify, .2, {
                Size = UDim2.new(0, 0, 0, 60)
            })
            task.wait(.2)
            Notify:Destroy()
            library.CurrentNoti = nil
        end

        if library.CurrentNoti then
            CloseNoti(library.CurrentNoti, library.CurrentNoti.Flash)
        end

        library.CurrentNoti = Notify

        Tween(Notify, .3, {
            Size = UDim2.new(0, textsize.X + 70, 0, 60)
        })
        Tween(Flash, .3, {
            Size = UDim2.new(0, textsize.X + 70, 0, 60)
        })
        task.wait(.3)
        Tween(Flash, 0.2, {
            Size = UDim2.new(0, 0, 0, 60)
        })

        if options then
            Accept.MouseButton1Click:Connect(function()
                callback(true)
                CloseNoti(library.CurrentNoti, library.CurrentNoti.Flash)
            end)

            Decline.MouseButton1Click:Connect(function()
                callback(false)
                CloseNoti(library.CurrentNoti, library.CurrentNoti.Flash)
            end)
        end

        task.spawn(function()
            if not options then
                task.wait(10)
                CloseNoti(Notify, Flash)
            end
        end)
    end

    function library:ProgressBar(name, amount, percentage)
        local percentage = percentage or false
        local amount = amount or 100
        assert(name, "A name is required to create a progress bar")

        local ProgressBar = Instance.new("Frame")
        local ProgressBarC = Instance.new("UICorner")
        local Title = Instance.new("TextLabel")
        local Flash = Instance.new("Frame")
        local FlashC = Instance.new("UICorner")
        local Number = Instance.new("TextLabel")
        local Glow = Instance.new("ImageLabel")
        local Inner = Instance.new("Frame")
        local InnerC = Instance.new("UICorner")
        local Fill = Instance.new("Frame")
        local FillC = Instance.new("UICorner")

        ProgressBar.Name = "ProgressBar"
        ProgressBar.Parent = Aurora
        ProgressBar.BackgroundColor3 = themes.Background
        ProgressBar.BorderSizePixel = 0
        ProgressBar.Position = UDim2.new(0, 15, 0, 851)
        ProgressBar.Size = UDim2.new(0, 0, 0, 60)
        ProgressBar.ClipsDescendants = true

        ProgressBarC.CornerRadius = UDim.new(0, 5)
        ProgressBarC.Name = "ProgressBarC"
        ProgressBarC.Parent = ProgressBar

        Title.Name = "Title"
        Title.Parent = ProgressBar
        Title.BackgroundTransparency = 1.000
        Title.Position = UDim2.new(0, 10, 0, 8)
        Title.Size = UDim2.new(0.936842084, -40, 0, 16)
        Title.ZIndex = 4
        Title.Font = Enum.Font.GothamMedium
        Title.Text = name
        Title.TextColor3 = themes.TextColor
        Title.TextSize = 14.000
        Title.TextXAlignment = Enum.TextXAlignment.Left

        Flash.Name = "Flash"
        Flash.Parent = ProgressBar
        Flash.BackgroundColor3 = themes.TextColor
        Flash.BorderSizePixel = 0
        Flash.ClipsDescendants = true
        Flash.Position = UDim2.new(-0.008, 0, -0.014, 0)
        Flash.Size = UDim2.new(0, 0, 0, 60)
        Flash.ZIndex = 5

        FlashC.CornerRadius = UDim.new(0, 5)
        FlashC.Name = "FlashC"
        FlashC.Parent = Flash

        Number.Name = "Number"
        Number.Parent = ProgressBar
        Number.BackgroundTransparency = 1.000
        Number.Position = UDim2.new(0, 156, 0, 8)
        Number.Size = UDim2.new(0.300000012, -40, 0, 16)
        Number.ZIndex = 4
        Number.Font = Enum.Font.GothamMedium
        Number.Text = percentage and "0%" or string.format("0/%s", tostring(amount))
        Number.TextColor3 = themes.TextColor
        Number.TextSize = 14.000
        Number.TextXAlignment = Enum.TextXAlignment.Right

        Glow.Name = "Glow"
        Glow.Parent = ProgressBar
        Glow.AnchorPoint = Vector2.new(0.5, 0.5)
        Glow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Glow.BackgroundTransparency = 1.000
        Glow.BorderSizePixel = 0
        Glow.Position = UDim2.new(0.5, 0, 0.483333319, 0)
        Glow.Size = UDim2.new(1, 47, 1.0333333, 47)
        Glow.ZIndex = 0
        Glow.Image = "rbxassetid://6014261993"
        Glow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        Glow.ImageTransparency = 0.500
        Glow.ScaleType = Enum.ScaleType.Slice
        Glow.SliceCenter = Rect.new(49, 49, 450, 450)

        Inner.Name = "Inner"
        Inner.Parent = ProgressBar
        Inner.BackgroundColor3 = themes.LightContrast
        Inner.Position = UDim2.new(0.0526314974, 0, 0.683333337, 0)
        Inner.Size = UDim2.new(0, 164, 0, 4)
        Inner.BorderSizePixel = 0

        InnerC.CornerRadius = UDim.new(0, 10)
        InnerC.Name = "InnerC"
        InnerC.Parent = Inner

        Fill.Name = "Fill"
        Fill.Parent = Inner
        Fill.BackgroundColor3 = themes.TextColor
        Fill.Position = UDim2.new(-0.00834411383, 0, -0.0666666627, 0)
        Fill.Size = UDim2.new(0, 0, 0, 4)
        Fill.BorderSizePixel = 0

        FillC.CornerRadius = UDim.new(0, 10)
        FillC.Name = "FillC"
        FillC.Parent = Fill

        local funcs = {}

        local function Animate(Value)
            if Value then
                Tween(ProgressBar, .3, {
                    Size = UDim2.new(0, 190, 0, 60)
                })
                Tween(Flash, .3, {
                    Size = UDim2.new(0, 190, 0, 60)
                })
                task.wait(.3)
                Tween(Flash, 0.2, {
                    Size = UDim2.new(0, 0, 0, 60)
                })
            else
                Tween(Flash, 0.2, {
                    Size = UDim2.new(0, 190, 0, 60)
                })
                task.wait(.2)
                Tween(ProgressBar, .3, {
                    Size = UDim2.new(0, 0, 0, 60)
                })
                task.wait(.2)
                ProgressBar:Destroy()
            end
        end

        Number:GetPropertyChangedSignal("Text"):Connect(function()
            if Number.Text == "100%" or Number.Text == string.format("%s/%s", tostring(amount), tostring(amount)) then
                Animate(false)
            end
        end)

        funcs.UpdateProgress = function(self, Value)
            local NewValue = percentage and tonumber(string.split(Number.Text, "%")[1]) + 1 or
                                 string.split(Number.Text, "/")[1] + 1

            local Percent = NewValue / amount

            local Dec = math.floor(Percent * 100)

            Percent = math.clamp(Percent, 0, 1)

            Fill:TweenSize(UDim2.new(Percent, 0, 0, 4), "Out", "Sine", .1, false)

            Tween(Fill, .2, {
                Size = UDim2.new(Percent, 0, 0, 4)
            })

            Number.Text = percentage and Dec .. '%' or string.format("%s/%s", tostring(NewValue), tostring(amount))
        end

        funcs.RemoveProgressBar = function()
            Animate(false)
        end

        Animate(true)

        Drag(ProgressBar)

        return funcs
    end

    function library:DestroyUI()
        if library.Destroyed then
            return
        end

        for i, v in next, library.Connections do
            if typeof(v) == "connection" then
                v:Disconnect()
            end
        end

        library.Destroyed = true
        Aurora:Destroy()
    end

    function library:ToggleUI()
        Aurora.Enabled = not Aurora.Enabled
    end

    Drag(Main, Top)

    TabHolderLL:GetPropertyChangedSignal "AbsoluteContentSize":Connect(function()
        TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolderLL.AbsoluteContentSize.Y + 12)
    end)

    local Tabs = {}

    function Tabs:CreateTab(title, icon)
        assert(title, "A title is required to create a tab")
        assert(icon, "An icon is required to create a tab")

        local Tab = Instance.new("TextButton")
        local Title = Instance.new("TextLabel")
        local Icon = Instance.new("ImageLabel")
        local Holder = Instance.new("ScrollingFrame")
        local HolderLL = Instance.new("UIListLayout")

        Tab.Name = "Tab"
        Tab.Parent = TabHolder
        Tab.BackgroundTransparency = 1.000
        Tab.BorderSizePixel = 0
        Tab.Size = UDim2.new(1, 0, 0, 26)
        Tab.ZIndex = 3
        Tab.AutoButtonColor = false
        Tab.Font = Enum.Font.Gotham
        Tab.Text = ""
        Tab.TextSize = 14.000

        Title.Name = "Title"
        Title.Parent = Tab
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.BackgroundTransparency = 1.000
        Title.Position = UDim2.new(-0.145299152, 40, 0.5, 0)
        Title.Size = UDim2.new(0.145299152, 76, 1, 0)
        Title.ZIndex = 3
        Title.Font = Enum.Font.Gotham
        Title.Text = title
        Title.TextColor3 = themes.TextColor
        Title.TextSize = 12.000
        Title.TextTransparency = 0.650
        Title.TextXAlignment = Enum.TextXAlignment.Left

        Icon.Name = "Icon"
        Icon.Parent = Tab
        Icon.AnchorPoint = Vector2.new(0, 0.5)
        Icon.BackgroundTransparency = 1.000
        Icon.Position = UDim2.new(-0.102564111, 12, 0.5, 0)
        Icon.Size = UDim2.new(0, 17, 0, 17)
        Icon.ZIndex = 3
        Icon.Image = string.format("rbxassetid://%s", icon)
        Icon.ImageTransparency = 0.650
        Icon.ScaleType = Enum.ScaleType.Fit
        Icon.ImageColor3 = themes.TextColor

        Holder.Name = string.format("Holder_%s", title)
        Holder.Parent = Main
        Holder.Active = true
        Holder.BackgroundColor3 = themes.Background
        Holder.BorderSizePixel = 0
        Holder.Position = UDim2.new(0.248226956, 0, 0.120588236, 0)
        Holder.Size = UDim2.new(0, 416, 0, 291)
        Holder.ScrollBarThickness = 1
        Holder.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
        Holder.Visible = false

        HolderLL.Name = "HolderLL"
        HolderLL.Parent = Holder
        HolderLL.SortOrder = Enum.SortOrder.LayoutOrder
        HolderLL.Padding = UDim.new(0, 10)

        HolderLL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Holder.CanvasSize = UDim2.new(0, 0, 0, HolderLL.AbsoluteContentSize.Y + 1)
        end)

        function library:SelectPage(Page)
            if title == Page then
                SwitchTab(Tab, Holder)
            end
        end

        if not library.CurrentTab then
            SwitchTab(Tab, Holder)
        end

        Tab.MouseButton1Click:Connect(function()
            SwitchTab(Tab, Holder)
        end)

        local Sections = {}

        function Sections:Section(title)
            assert(title, "A title is required to create a section")

            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local Title = Instance.new("TextLabel")
            local SectionLL = Instance.new("UIListLayout")
            local SectionP = Instance.new("UIPadding")

            Section.Name = string.format("Section_%s", title)
            Section.Parent = Holder
            Section.BackgroundColor3 = themes.LightContrast
            Section.BorderSizePixel = 0
            Section.Size = UDim2.new(0, 409, 0, 119)

            SectionC.CornerRadius = UDim.new(0, 4)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section

            Title.Name = "Title"
            Title.Parent = Section
            Title.BackgroundTransparency = 1.000
            Title.BorderSizePixel = 0
            Title.Position = UDim2.new(0.0220048912, 0, -0.0309278332, 0)
            Title.Size = UDim2.new(0.982885063, 0, 0.0182648394, 20)
            Title.ZIndex = 2
            Title.Font = Enum.Font.GothamMedium
            Title.Text = string.format(" %s", title)
            Title.TextColor3 = themes.TextColor
            Title.TextSize = 13.000
            Title.TextXAlignment = Enum.TextXAlignment.Left

            SectionLL.Name = "SectionLL"
            SectionLL.Parent = Section
            SectionLL.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLL.Padding = UDim.new(0, 4)
            SectionLL.HorizontalAlignment = Enum.HorizontalAlignment.Center

            SectionP.Name = "SectionP"
            SectionP.Parent = Section
            SectionP.PaddingTop = UDim.new(0, 4)

            SectionLL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                Section.Size = UDim2.new(0, 409, 0, SectionLL.AbsoluteContentSize.Y + 14)
            end)

            local SectionHolder = {}

            function SectionHolder:Button(name, callback)
                local callback = callback or function()
                end
                assert(name, "a name is required to create a button")

                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")

                Btn.Name = "Btn"
                Btn.Parent = Section
                Btn.BackgroundColor3 = themes.DarkContrast
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(0.0244497284, 0, 0.115571238, 0)
                Btn.Size = UDim2.new(0.975856602, 0, 0, 30)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.Gotham
                Btn.TextColor3 = themes.TextColor
                Btn.TextSize = 13
                Btn.Text = name

                BtnC.CornerRadius = UDim.new(0, 3)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                library.flags[name] = {
                    State = Btn.Text,

                    ChangeText = function(self, text)
                        if Btn.Text == text then
                            return
                        end

                        Btn.Text = text

                        library.flags[name].State = text
                    end
                }

                local Debounce = false

                Btn.MouseButton1Click:Connect(function()
                    if Debounce then
                        return
                    end
                    Debounce = true
                    Pop(Btn)
                    spawn(callback)
                    Debounce = false
                end)
                return Btn
            end

            function SectionHolder:Label(name)
                assert(name, "A name is required to create a label")

                local Label = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")
                local LabelP = Instance.new("UIPadding")

                Label.Name = "Label"
                Label.Parent = Section
                Label.BackgroundColor3 = themes.DarkContrast
                Label.BorderSizePixel = 0
                Label.Position = UDim2.new(0.0120716793, 0, 0.340642005, 0)
                Label.Size = UDim2.new(0.975856662, 0, -0.010416667, 30)
                Label.Font = Enum.Font.Gotham
                Label.Text = name
                Label.TextWrapped = true
                Label.TextColor3 = themes.TextColor
                Label.TextSize = 12.000
                Label.TextYAlignment = Enum.TextYAlignment.Top

                LabelC.CornerRadius = UDim.new(0, 3)
                LabelC.Name = "LabelC"
                LabelC.Parent = Label

                LabelP.Parent = Label
                LabelP.PaddingLeft = UDim.new(0, 5)
                LabelP.PaddingTop = UDim.new(0, 5)
                LabelP.PaddingRight = UDim.new(0, 5)

                Label.Size = UDim2.new(Label.Size.X.Scale, Label.Size.X.Offset, 0, math.huge)
                Label.Size = UDim2.new(Label.Size.X.Scale, Label.Size.X.Offset, 0, Label.TextBounds.Y + 24 / 2)

                return Label
            end

            function SectionHolder:Toggle(name, default, callback)
                local callback = callback or function()
                end
                local default = default or false
                assert(name, "A name is required to create a toggle")

                local Toggle = Instance.new("TextButton")
                local ToggleC = Instance.new("UICorner")
                local Inner = Instance.new("Frame")
                local InnerC = Instance.new("UICorner")
                local Circle = Instance.new("Frame")
                local CircleC = Instance.new("UICorner")

                Toggle.Name = "Toggle"
                Toggle.Parent = Section
                Toggle.BackgroundColor3 = themes.DarkContrast
                Toggle.BorderSizePixel = 0
                Toggle.Position = UDim2.new(0.0244497284, 0, 0.115571238, 0)
                Toggle.Size = UDim2.new(0.975856602, 0, 0, 30)
                Toggle.AutoButtonColor = false
                Toggle.Font = Enum.Font.Gotham
                Toggle.Text = string.format("  %s", name)
                Toggle.TextColor3 = themes.TextColor
                Toggle.TextSize = 13.000
                Toggle.TextXAlignment = Enum.TextXAlignment.Left

                ToggleC.CornerRadius = UDim.new(0, 3)
                ToggleC.Name = "ToggleC"
                ToggleC.Parent = Toggle

                Inner.Name = "Inner"
                Inner.Parent = Toggle
                Inner.BackgroundColor3 = themes.LightContrast
                Inner.BorderSizePixel = 0
                Inner.Position = UDim2.new(0.877277315, 0, 0.166969255, 0)
                Inner.Size = UDim2.new(0, 41, 0, 19)
                Inner.ZIndex = 3

                InnerC.CornerRadius = UDim.new(1, 0)
                InnerC.Name = "InnerC"
                InnerC.Parent = Inner

                Circle.Name = "Circle"
                Circle.Parent = Inner
                Circle.BackgroundColor3 = themes.TextColor
                Circle.BorderSizePixel = 0
                Circle.Position = UDim2.new(0.100000001, 0, 0.158000007, 0)
                Circle.Size = UDim2.new(0, 13, 0, 13)
                Circle.ZIndex = 3

                CircleC.CornerRadius = UDim.new(5, 0)
                CircleC.Name = "CircleC"
                CircleC.Parent = Circle

                library.flags[name] = {
                    State = default,

                    SetState = function(self, State)
                        if not State then
                            State = not library.flags[name].State
                        end

                        if State == library.flags[name].State then
                            return "State is already set"
                        end

                        Tween(Circle, .2, {
                            Position = UDim2.new(State and 0.55 or 0.1, 0, 0.158, 0)
                        })

                        task.wait(.2)

                        library.flags[name].State = State

                        callback(State)
                    end
                }

                if default then
                    library.flags[name]:SetState(true)
                end

                Toggle.MouseButton1Click:Connect(function()
                    library.flags[name]:SetState()
                end)
            end

            function SectionHolder:TextBox(name, default, callback)
                local callback = callback or function()
                end
                assert(name, "A name is required to create a textbox")
                assert(default, "Default text is required to create a textbox")

                local TextBox = Instance.new("TextButton")
                local TextBoxC = Instance.new("UICorner")
                local Input = Instance.new("TextBox")
                local InputC = Instance.new("UICorner")
                local TextBoxLL = Instance.new("UIListLayout")
                local TextBoxP = Instance.new("UIPadding")

                TextBox.Name = "TextBox"
                TextBox.Parent = Section
                TextBox.BackgroundColor3 = themes.DarkContrast
                TextBox.BorderSizePixel = 0
                TextBox.Position = UDim2.new(0.0244497284, 0, 0.115571238, 0)
                TextBox.Size = UDim2.new(0.975856602, 0, 0, 30)
                TextBox.AutoButtonColor = false
                TextBox.Font = Enum.Font.Gotham
                TextBox.Text = string.format("  %s", name)
                TextBox.TextColor3 = themes.TextColor
                TextBox.TextSize = 13.000
                TextBox.TextXAlignment = Enum.TextXAlignment.Left

                TextBoxC.CornerRadius = UDim.new(0, 3)
                TextBoxC.Name = "TextBoxC"
                TextBoxC.Parent = TextBox

                Input.Name = "Input"
                Input.Parent = TextBox
                Input.BackgroundColor3 = themes.LightContrast
                Input.ClipsDescendants = true
                Input.Position = UDim2.new(0, 280, 0, 7)
                Input.Size = UDim2.new(0, 111, 0, 16)
                Input.ZIndex = 3
                Input.Font = Enum.Font.GothamMedium
                Input.Text = default
                Input.TextColor3 = themes.TextColor
                Input.TextSize = 12.000

                InputC.CornerRadius = UDim.new(0, 3)
                InputC.Name = "InputC"
                InputC.Parent = Input

                TextBoxLL.Name = "TextBoxLL"
                TextBoxLL.Parent = TextBox
                TextBoxLL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextBoxLL.SortOrder = Enum.SortOrder.LayoutOrder
                TextBoxLL.VerticalAlignment = Enum.VerticalAlignment.Center

                TextBoxP.Name = "TextBoxP"
                TextBoxP.Parent = TextBox
                TextBoxP.PaddingRight = UDim.new(0, 8)

                Input.FocusLost:Connect(function()
                    if Input.Text == "" then
                        Input.Text = default
                    end

                    callback(Input.Text)
                end)

                return TextBox
            end

            function SectionHolder:KeyBind(name, default, callback)
                local callback = callback or function()
                end
                assert(name, "A name is required to create a keybind")
                assert(default, "A default key is required to create a keybind")

                local KeyBind = Instance.new("TextButton")
                local TextBoxC = Instance.new("UICorner")
                local Input = Instance.new("TextButton")
                local InputC = Instance.new("UICorner")
                local KeyBindLL = Instance.new("UIListLayout")
                local KeyBindP = Instance.new("UIPadding")

                KeyBind.Name = "KeyBind"
                KeyBind.Parent = Section
                KeyBind.BackgroundColor3 = themes.DarkContrast
                KeyBind.BorderSizePixel = 0
                KeyBind.Position = UDim2.new(0.0244497284, 0, 0.115571238, 0)
                KeyBind.Size = UDim2.new(0.975856602, 0, 0, 30)
                KeyBind.AutoButtonColor = false
                KeyBind.Font = Enum.Font.Gotham
                KeyBind.Text = string.format("  %s", name)
                KeyBind.TextColor3 = themes.TextColor
                KeyBind.TextSize = 13.000
                KeyBind.TextXAlignment = Enum.TextXAlignment.Left

                TextBoxC.CornerRadius = UDim.new(0, 3)
                TextBoxC.Name = "TextBoxC"
                TextBoxC.Parent = KeyBind

                Input.Name = "Input"
                Input.Parent = KeyBind
                Input.BackgroundColor3 = themes.LightContrast
                Input.ClipsDescendants = true
                Input.Position = UDim2.new(0, 280, 0, 7)
                Input.Size = UDim2.new(0, 111, 0, 16)
                Input.ZIndex = 3
                Input.AutoButtonColor = false
                Input.Font = Enum.Font.GothamMedium
                Input.Text = default
                Input.TextColor3 = themes.TextColor
                Input.TextSize = 12.000

                InputC.CornerRadius = UDim.new(0, 3)
                InputC.Name = "InputC"
                InputC.Parent = Input

                KeyBindLL.Name = "KeyBindLL"
                KeyBindLL.Parent = KeyBind
                KeyBindLL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeyBindLL.SortOrder = Enum.SortOrder.LayoutOrder
                KeyBindLL.VerticalAlignment = Enum.VerticalAlignment.Center

                KeyBindP.Name = "KeyBindP"
                KeyBindP.Parent = KeyBind
                KeyBindP.PaddingRight = UDim.new(0, 8)

                local BannedKeys = {
                    Return = true,
                    Space = true,
                    Tab = true,
                    Backquote = true,
                    CapsLock = true,
                    Escape = true,
                    Unknown = true
                }

                local ShortNames = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt"
                }

                local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                local bindKey = default
                local keyTxt = (default and (ShortNames[default.Name] or default.Name) or "None")

                library.Connections[#library.Connections + 1] =
                    game:GetService("UserInputService").InputBegan:Connect(function(inp, gpe)
                        if library.Destroyed then
                            return
                        end

                        if gpe then
                            return
                        end

                        if inp.UserInputType ~= Enum.UserInputType.Keyboard then
                            return
                        end

                        if inp.KeyCode ~= bindKey then
                            return
                        end

                        callback(bindKey.Name)
                    end)

                Input.MouseButton1Click:Connect(function()
                    Input.Text = "..."
                    task.wait()
                    local key = game.UserInputService.InputEnded:Wait()

                    if key.UserInputType ~= Enum.UserInputType.Keyboard then
                        Input.Text = keyTxt
                        return
                    end

                    if BannedKeys[tostring(key.KeyCode.Name)] then
                        Input.Text = keyTxt
                        return
                    end

                    bindKey = Enum.KeyCode[tostring(key.KeyCode.Name)]
                    Input.Text = ShortNames[tostring(key.KeyCode.Name)] or tostring(key.KeyCode.Name)
                end)

                return KeyBind
            end

            function SectionHolder:Slider(name, default, min, max, precise, callback)
                local callback = callback or function()
                end
                local precise = precise or false
                local min = min or 1
                local max = max or 100
                local default = default or min
                assert(name, "A name is required to create a slider")

                local Slider = Instance.new("TextButton")
                local SliderC = Instance.new("UICorner")
                local Title = Instance.new("TextLabel")
                local Number = Instance.new("TextBox")
                local Outer = Instance.new("TextLabel")
                local Inner = Instance.new("Frame")
                local InnerC = Instance.new("UICorner")
                local Fill = Instance.new("Frame")
                local FillC = Instance.new("UICorner")
                local Circle = Instance.new("Frame")
                local CircleC = Instance.new("UICorner")

                Slider.Name = "Slider"
                Slider.Parent = Section
                Slider.BackgroundColor3 = themes.DarkContrast
                Slider.BorderSizePixel = 0
                Slider.Position = UDim2.new(-0.0195600521, 0, 0.136772648, 0)
                Slider.Size = UDim2.new(0.976000011, 0, 0, 50)
                Slider.AutoButtonColor = false
                Slider.Font = Enum.Font.Gotham
                Slider.Text = ""
                Slider.TextColor3 = themes.TextColor
                Slider.TextSize = 13.000
                Slider.TextXAlignment = Enum.TextXAlignment.Left

                SliderC.CornerRadius = UDim.new(0, 3)
                SliderC.Name = "SliderC"
                SliderC.Parent = Slider

                Title.Name = "Title"
                Title.Parent = Slider
                Title.BackgroundTransparency = 1.000
                Title.Position = UDim2.new(0, 8, 0, 6)
                Title.Size = UDim2.new(0.740490735, 0, 0, 16)
                Title.ZIndex = 3
                Title.Font = Enum.Font.Gotham
                Title.Text = name
                Title.TextColor3 = themes.TextColor
                Title.TextSize = 13.000
                Title.TextTransparency = 0.100
                Title.TextXAlignment = Enum.TextXAlignment.Left

                Number.Name = "Number"
                Number.Parent = Slider
                Number.BackgroundTransparency = 1.000
                Number.BorderSizePixel = 0
                Number.Position = UDim2.new(1.00250506, -30, 0, 6)
                Number.Size = UDim2.new(0, 20, 0, 16)
                Number.ZIndex = 3
                Number.Font = Enum.Font.GothamMedium
                Number.Text = tostring(default)
                Number.TextColor3 = themes.TextColor
                Number.TextSize = 12.000
                Number.TextXAlignment = Enum.TextXAlignment.Right

                Outer.Name = "Outer"
                Outer.Parent = Slider
                Outer.BackgroundTransparency = 1.000
                Outer.BorderColor3 = Color3.fromRGB(27, 42, 53)
                Outer.Position = UDim2.new(0, 9, 0, 28)
                Outer.Size = UDim2.new(1.00751531, -20, 0, 16)
                Outer.ZIndex = 3
                Outer.Text = ""

                Inner.Name = "Inner"
                Inner.Parent = Outer
                Inner.BackgroundColor3 = themes.LightContrast
                Inner.BorderSizePixel = 0
                Inner.Position = UDim2.new(-0.00263030501, 0, 0.375, 0)
                Inner.Size = UDim2.new(1, 0, 0, 4)
                Inner.ZIndex = 3

                InnerC.CornerRadius = UDim.new(0, 10)
                InnerC.Name = "InnerC"
                InnerC.Parent = Inner

                Fill.Name = "Fill"
                Fill.Parent = Inner
                Fill.BackgroundColor3 = themes.TextColor
                Fill.BorderSizePixel = 0
                Fill.Position = UDim2.new(0.00012392737, 0, 0, 0)
                Fill.Size = UDim2.new(0.379879832, 0, 0, 4)
                Fill.ZIndex = 3

                FillC.CornerRadius = UDim.new(0, 10)
                FillC.Name = "FillC"
                FillC.Parent = Fill

                Circle.Name = "Circle"
                Circle.Parent = Fill
                Circle.BackgroundColor3 = themes.TextColor
                Circle.Position = UDim2.new(0.979818106, 0, -0.75, 0)
                Circle.Size = UDim2.new(0, 10, 0, 10)
                Circle.ZIndex = 3
                Circle.Transparency = 1

                CircleC.CornerRadius = UDim.new(0, 9999)
                CircleC.Name = "CircleC"
                CircleC.Parent = Circle

                local funcs = {}

                funcs.SetState = function(self, state)
                    local percent = (Mouse.X - Inner.AbsolutePosition.X) / Inner.AbsoluteSize.X

                    if state then
                        percent = (state - min) / (max - min)
                    end

                    percent = math.clamp(percent, 0, 1)

                    if precise then
                        state = state or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                    else
                        state = state or math.floor(min + (max - min) * percent)
                    end

                    Number.Text = tostring(state)

                    Tween(Fill, .1, {
                        Size = UDim2.new(percent, 0, 1, 0)
                    })

                    callback(tonumber(state))
                end

                funcs:SetState(default)

                local dragging, boxFocused, allowed = false, false, {
                    [""] = true,
                    ["-"] = true
                }

                Outer.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Tween(Circle, .2, {
                            Transparency = 0
                        })
                        funcs:SetState()
                        dragging = true
                    end
                end)

                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                        task.wait(1)
                        if not dragging then
                            Tween(Circle, .2, {
                                Transparency = 1
                            })
                        end
                    end
                end)

                game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetState()
                    end
                end)

                Number.Focused:Connect(function()
                    boxFocused = true
                end)

                Number.FocusLost:Connect(function()
                    if not tonumber(Number.Text) then
                        Number.Text = default
                    end

                    if tonumber(Number.Text) < min then
                        funcs:SetState(min)
                    end

                    boxFocused = false
                end)

                Number:GetPropertyChangedSignal "Text":Connect(function()
                    if not boxFocused then
                        return
                    end

                    if Number.Text == "" then
                        return
                    end

                    local text = Number.Text

                    if not tonumber(Number.Text) then
                        Number.Text = ""
                    end

                    if tonumber(Number.Text) > max then
                        funcs:SetState(max)
                    end

                    funcs:SetState(tonumber(Number.Text))
                end)

                return funcs
            end

            function SectionHolder:DropDown(name, options, players, reset, callback)
                local callback = callback or function()
                end
                local options = options or {}
                local players = players or false
                local reset = reset or false
                assert(name, "a name is required to create a dropdown")

                local DropDown = Instance.new("TextButton")
                local DropDownC = Instance.new("UICorner")
                local Search = Instance.new("TextBox")
                local Arrow = Instance.new("ImageButton")
                local DropdownHolder = Instance.new("Frame")
                local DropdownHolderC = Instance.new("UICorner")
                local OptionHolder = Instance.new("ScrollingFrame")
                local OptionHolderLL = Instance.new("UIListLayout")

                DropDown.Name = "DropDown"
                DropDown.Parent = Section
                DropDown.BackgroundColor3 = themes.DarkContrast
                DropDown.BorderSizePixel = 0
                DropDown.Position = UDim2.new(0.0244497284, 0, 0.115571238, 0)
                DropDown.Size = UDim2.new(0.975856602, 0, 0, 30)
                DropDown.AutoButtonColor = false
                DropDown.Font = Enum.Font.Gotham
                DropDown.Text = ""
                DropDown.TextColor3 = themes.TextColor
                DropDown.TextSize = 13.000
                DropDown.TextXAlignment = Enum.TextXAlignment.Left

                DropDownC.CornerRadius = UDim.new(0, 3)
                DropDownC.Name = "DropDownC"
                DropDownC.Parent = DropDown

                Search.Name = "Search"
                Search.Parent = DropDown
                Search.AnchorPoint = Vector2.new(0, 0.5)
                Search.BackgroundTransparency = 1.000
                Search.Position = UDim2.new(-0.00751628308, 10, 0.5, 1)
                Search.Size = UDim2.new(1.00501084, -42, 1, 0)
                Search.ZIndex = 3
                Search.Font = Enum.Font.Gotham
                Search.Text = name
                Search.TextColor3 = themes.TextColor
                Search.TextSize = 13.000
                Search.TextTransparency = 0.100
                Search.TextXAlignment = Enum.TextXAlignment.Left
                Search.ClipsDescendants = true

                Arrow.Name = "Arrow"
                Arrow.Parent = DropDown
                Arrow.BackgroundTransparency = 1.000
                Arrow.BorderSizePixel = 0
                Arrow.Position = UDim2.new(1.00501096, -28, 0.5, -9)
                Arrow.Size = UDim2.new(0, 18, 0, 18)
                Arrow.ZIndex = 3
                Arrow.Image = "rbxassetid://5012539403"
                Arrow.SliceCenter = Rect.new(2, 2, 298, 298)
                Arrow.ImageColor3 = themes.TextColor

                DropdownHolder.Name = "DropdownHolder"
                DropdownHolder.Parent = Section
                DropdownHolder.BackgroundColor3 = themes.Background
                DropdownHolder.BorderSizePixel = 0
                DropdownHolder.ClipsDescendants = true
                DropdownHolder.Position = UDim2.new(0.0120000485, 0, 0.430878669, 0)
                DropdownHolder.Size = UDim2.new(0.976000011, 0, 0, 0)
                DropdownHolder.Visible = false

                DropdownHolderC.CornerRadius = UDim.new(0, 3)
                DropdownHolderC.Name = "DropdownHolderC"
                DropdownHolderC.Parent = DropdownHolder

                OptionHolder.Name = "OptionHolder"
                OptionHolder.Parent = DropdownHolder
                OptionHolder.Active = true
                OptionHolder.BackgroundColor3 = themes.TextColor
                OptionHolder.BackgroundTransparency = 1.000
                OptionHolder.BorderSizePixel = 0
                OptionHolder.Position = UDim2.new(0.0100202896, 0, 0.0178573243, 0)
                OptionHolder.Size = UDim2.new(0, 388, 0, 132)
                OptionHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
                OptionHolder.ScrollBarThickness = 1
                OptionHolder.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)

                OptionHolderLL.Name = "OptionHolderLL"
                OptionHolderLL.Parent = OptionHolder
                OptionHolderLL.SortOrder = Enum.SortOrder.LayoutOrder
                OptionHolderLL.Padding = UDim.new(0, 4)

                local IsOpen, IsSearching, funcs = false, false, {}

                local ShowAll = function()
                    for i, v in next, OptionHolder:GetChildren() do
                        if v:IsA "TextButton" then
                            v.Visible = true
                        end
                    end
                end

                local SearchOption = function(text)
                    if text == "" then
                        ShowAll()
                    end
                    for i, v in next, OptionHolder:GetChildren() do
                        if v:IsA("TextButton") then
                            v.Visible = v.Text:lower():match(text:lower()) and true or false
                        end
                    end
                end

                local Open = function()
                    IsOpen = not IsOpen

                    if IsOpen then
                        ShowAll()
                        DropdownHolder.Visible = true
                    end

                    Tween(DropdownHolder, .2, {
                        Size = UDim2.new(0.976, 0, 0, IsOpen and 140 or 0)
                    })

                    task.wait(.2)

                    if not IsOpen then
                        DropdownHolder.Visible = false
                    end
                end

                local PlayerList = function()
                    local AllPlayers = {}

                    for i, v in next, game:GetService "Players":GetChildren() do
                        table.insert(AllPlayers, v.Name)
                    end
                    return AllPlayers
                end

                options = players and PlayerList() or options

                funcs.AddOption = function(self, text)
                    local Option = Instance.new("TextButton")
                    local OptionC = Instance.new("UICorner")
                    local OptionP = Instance.new("UIPadding")

                    Option.Name = "Option"
                    Option.Parent = OptionHolder
                    Option.BackgroundColor3 = themes.DarkContrast
                    Option.BorderSizePixel = 0
                    Option.Size = UDim2.new(0.976405919, 0, 0, 30)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.Gotham
                    Option.Text = text
                    Option.TextColor3 = themes.TextColor
                    Option.TextSize = 13.000
                    Option.TextXAlignment = Enum.TextXAlignment.Left
                    Option.TextTransparency = 0

                    OptionC.CornerRadius = UDim.new(0, 3)
                    OptionC.Name = "OptionC"
                    OptionC.Parent = Option

                    OptionP.Name = "OptionP"
                    OptionP.Parent = Option
                    OptionP.PaddingLeft = UDim.new(0, 8)

                    Option.MouseButton1Click:Connect(function()
                        Search.Text = reset and name or Option.Text
                        callback(Option.Text)
                        Open()
                    end)
                end

                funcs.SetOptions = function(self, options)
                    for i, v in next, OptionHolder:GetChildren() do
                        if v:IsA "TextButton" then
                            v:Destroy()
                        end
                    end
                    for i, v in next, options do
                        funcs:AddOption(v)
                    end
                end

                Search.Focused:Connect(function()
                    IsSearching = true
                end)

                Search.FocusLost:Connect(function()
                    if Search.Text == "" and multi and Selected[1] then -- roblox is fucking retarded
                        Search.Text = SetSearchText(Search)
                    end

                    if Search.Text == "" then
                        Search.Text = name
                    end

                    if Search.Text:sub(1, 8) == "Selected" then
                        return
                    end

                    IsSearching = false
                end)

                Search:GetPropertyChangedSignal("Text"):Connect(function()
                    if not IsOpen then
                        return
                    end

                    if Search.Text == name or Search.Text == "" or Search.Text:sub(1, 8) == "Selected" then
                        return
                    end

                    if not IsSearching then
                        return
                    end

                    SearchOption(Search.Text)
                end)

                OptionHolderLL:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
                    OptionHolder.CanvasSize = UDim2.new(0, 0, 0, OptionHolderLL.AbsoluteContentSize.Y + 1)
                end)

                Arrow.MouseButton1Click:Connect(function()
                    if players then
                        funcs:SetOptions(PlayerList())
                    end
                    Open()
                end)

                funcs:SetOptions(options)

                return funcs
            end
            return SectionHolder
        end
        return Sections
    end
    return Tabs
end

_G["提醒"] = function(tr)
    library:Notify("Dark X", tr, false)
end
_G["鼠标"] = _G["自己"]:GetMouse()

_G['正在选择土地'] = _G['自己'].PlayerGui.PropertyPurchasingGUI.PropertyPurchasingClient
_G['选择的环境'] = getsenv(_G['正在选择土地'])
_G['旧的点击'] = _G['选择的环境'].enterPurchaseMode
getsenv(_G['正在选择土地']).enterPurchaseMode = function(...)
    if not _G['菜单']['快速加载'] then
        return _G['旧的点击'](...)
    end
    setupvalue(_G['选择的环境'].rotate, 3, 0)
    setupvalue(_G['旧的点击'], 10, _G['获得土地']())
    return
end
local Rayfiel
local lib, Tab, Section = library:Create("Dark X V3")

_G["飞行"] = function(Value)
    repeat
        wait()
    until _G["自己"] and _G["自己角色"] and _G["自己角色"]:FindFirstChild('Head') and
        _G["自己角色"]:FindFirstChild('Humanoid')
    local Steer = {
        f = 0,
        b = 0,
        l = 0,
        r = 0
    }
    local BackSteer = {
        f = 0,
        b = 0,
        l = 0,
        r = 0
    }
    local Maxpeed = 500
    if not _G["自己身体"].SeatPart then
        _G["自己身体"].PlatformStand = true
    end
    if _G["自己身体"].SeatPart then
        CarFly = _G["自己身体"].SeatPart
        local FlyWeldone = Instance.new("Weld", _G["自己的方块"])
        local FlyWeldtwo = Instance.new("Weld", _G["自己身体"].SeatPart)
        FlyWeldone.Part0 = _G["自己的方块"]
        FlyWeldone.Part1 = _G["自己身体"].SeatPart
        FlyWeldtwo.Part0 = _G["自己的方块"]
        FlyWeldtwo.Part1 = _G["自己身体"].SeatPart
    end
    function Fly()
        local Gyro = Instance.new('BodyGyro', _G["自己的方块"])
        Gyro.P = 9e4
        Gyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        Gyro.CFrame = _G["自己的方块"].CFrame
        local Velocity = Instance.new('BodyVelocity', _G["自己的方块"])
        Velocity.Velocity = Vector3.new(0, 0.1, 0)
        Velocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
        repeat
            wait()
            local FlySpeed = _G["菜单"]["飞行速度"]
            local SteerSpeed = 50
            if Steer.l + Steer.r ~= 0 or Steer.f + Steer.b ~= 0 then
                SteerSpeed = FlySpeed
                if SteerSpeed > Maxpeed then
                    SteerSpeed = Maxpeed
                end
            elseif not (Steer.l + Steer.r ~= 0 or Steer.f + Steer.b ~= 0) then
                SteerSpeed = SteerSpeed - 50
                if SteerSpeed < 0 then
                    FlySpeed = 0
                end
            end
            if (Steer.l + Steer.r) ~= 0 or (Steer.f + Steer.b) ~= 0 then
                Velocity.Velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (Steer.f + Steer.b)) +
                                        ((game.Workspace.CurrentCamera.CoordinateFrame *
                                            CFrame.new(Steer.l + Steer.r, (Steer.f + Steer.b) * .2, 0).p) -
                                            game.Workspace.CurrentCamera.CoordinateFrame.p)) * SteerSpeed
                BackSteer = {
                    f = Steer.f,
                    b = Steer.b,
                    l = Steer.l,
                    r = Steer.r
                }
            elseif (Steer.l + Steer.r == 0 or Steer.f + Steer.b == 0) and SteerSpeed ~= 0 then
                Velocity.Velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector *
                                        (BackSteer.f + BackSteer.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame *
                                        CFrame.new(BackSteer.l + BackSteer.r, (BackSteer.f + BackSteer.b) * .2, 0).p) -
                                        game.Workspace.CurrentCamera.CoordinateFrame.p)) * SteerSpeed
            else
                Velocity.Velocity = Vector3.new(0, 0.1, 0)
            end
            Gyro.CFrame = game.Workspace.CurrentCamera.CoordinateFrame *
                              CFrame.Angles(-math.rad((Steer.f + Steer.b) * 50 * SteerSpeed / Maxpeed), 0, 0)
        until not _G["菜单"]["正在飞行"]
        local SteerSpeed = 0
        local Steer = {
            F = 0,
            B = 0,
            L = 0,
            R = 0
        }
        local BackSteer = {
            F = 0,
            B = 0,
            L = 0,
            R = 0
        }
        Gyro:Destroy()
        Velocity:Destroy()
        pcall(function()
            for _, v in next, _G["自己身体"].SeatPart:GetChildren() do
                if v.Name == 'Weld' then
                    v:Destroy();
                end
            end
            for i, v in next, _G["自己的方块"]:GetChildren() do
                if v:IsA('Weld') then
                    v:Destroy();
                end
            end
            _G["自己的方块"].CFrame = CFrame.new(CarFly.CFrame.p)
        end);
        _G["自己身体"].PlatformStand = false
    end

    _G["鼠标"].KeyDown:Connect(function(Key)
        if Key:lower() == 'w' then
            isWDown = true
            Steer.f = 1
        elseif Key:lower() == 'a' then
            isADown = true
            Steer.l = -1
        elseif Key:lower() == 's' then
            isSDown = true
            Steer.b = -1
        elseif Key:lower() == 'd' then
            isSDown = true
            Steer.r = 1
        end
    end)
    _G["鼠标"].KeyUp:Connect(function(Key)
        if Key:lower() == 'w' then
            isWDown = false
            Steer.f = 0
        elseif Key:lower() == 'a' then
            isADown = false
            Steer.l = 0
        elseif Key:lower() == 's' then
            isSDown = false
            Steer.b = 0
        elseif Key:lower() == 'd' then
            isDDown = false
            Steer.r = 0
        end
    end)

    if not Value then
        _G["菜单"]["正在飞行"] = false
        _G["自己身体"].PlatformStand = false
    elseif Value then
        _G["菜单"]["正在飞行"] = true
        Fly()
    end
end
_G["拉东西"] = game.ReplicatedStorage.Interaction.ClientIsDragging
_G["穿"] = nil
_G["穿墙"] = function(o)
    if not o then
        if _G["穿"] then
            _G["穿"]:Disconnect()
            _G["穿"] = nil
        end
        return
    end
    _G["穿"] = game:GetService("RunService").Stepped:connect(function()
        for i, v in next, _G["自己角色"]:GetChildren() do
            if v:IsA("Part") or v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end)
end

_G["获得工具的伤害"] = function(tool)
    local toolName

    toolName = tool.ToolName.Value

    return require(game.ReplicatedStorage.AxeClasses['AxeClass_' .. toolName]).new()
end

_G["传送"] = function(pos)

    if _G["自己身体"].SeatPart ~= nil then

        spawn(function()
            for i = 1, 20 do
                wait()
                _G["自己身体"].SeatPart.Parent:PivotTo(pos)

                _G["拉东西"]:FireServer(_G["自己身体"].SeatPart.Parent.Main)
            end
        end)
    else
        _G["自己角色"]:PivotTo(pos)
    end

end

_G["检查斧头"] = function(Tree)
    _G["木头种类"] = Tree
    local alltool = {}
    local tool = 0
    for i, v in next, _G["自己"].Backpack:GetChildren() do
        if v:IsA("Tool") and v.Name ~= "BlueprintTool" then
            tool = tool + 1
            table.insert(alltool, v)
        end
    end
    if _G["自己角色"]:FindFirstChildOfClass("Tool") then
        table.insert(alltool, _G["自己角色"]:FindFirstChildOfClass("Tool"))
        tool = tool + 1
    end
    if tool == 0 then
        return _G["提醒"]("you need one axe")
    end

    for i, v in next, alltool do

        local toolstarts = _G["获得工具的伤害"](v)
        local dam
        if toolstarts.SpecialTrees then
            if toolstarts.SpecialTrees[_G["木头种类"]] then
                dam = toolstarts.SpecialTrees[_G["木头种类"]].Damage

                if _G["木头种类"] == "LoneCave" and v.ToolName.Value ~= 'EndTimesAxe' then
                    return _G["提醒"]("you need one end times axe")
                end
                return v, dam
            end

        end
        dam = toolstarts.Damage
        if dam > 0 then
            tool = v;
        end
        if _G["木头种类"] == "LoneCave" and tool.ToolName.Value ~= 'EndTimesAxe' then
            return _G["提醒"]("you need one end times axe")
        end
        return tool, dam
    end
end

_G["找木头"] = function(treeClass)
    for i, v in next, Workspace:GetChildren() do
        if v.Name == "TreeRegion" then
            for i, v in next, v:GetChildren() do
                if v:FindFirstChild("TreeClass") and tostring(v.TreeClass.Value) == treeClass and
                    v:FindFirstChild("Owner") then
                    if v.Owner.Value == nil or tostring(v.Owner.Value) == _G["自己"] then
                        if #v:children() > 8 and v:FindFirstChild("WoodSection") then
                            for i, v in next, v:GetChildren() do
                                if v:FindFirstChild("ID") and v.ID.Value == 1 and v.Size.Y > .5 then
                                    return v;
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return false;
end
_G["砍"] = function(tree, axe, id, hei, dm)

    game:GetService 'ReplicatedStorage'.Interaction.RemoteProxy:FireServer(tree, {
        tool = axe,
        faceVector = Vector3.new(-1, 0, 0),
        height = hei or 0.3,
        sectionId = id or 1,
        hitPoints = dm,
        cooldown = -14,
        cuttingClass = "Axe"
    })
end

local DraggerAdded = game.Workspace.ChildAdded:Connect(function(v)
    if v:IsA("Part") and v:WaitForChild("BodyPosition") and v:WaitForChild("BodyGyro") then
        if _G["菜单"]["大力"] then
            v.BrickColor = BrickColor.new("Really red")
            v:WaitForChild("BodyPosition").P = 100500
            v:WaitForChild("BodyPosition").D = 1040
            v:WaitForChild("BodyPosition").MaxForce = Vector3.new(90000, 90000, 90000) * math.huge
            v:WaitForChild("BodyGyro").P = 1400
            v:WaitForChild("BodyGyro").D = 1040
            v:WaitForChild("BodyGyro").MaxTorque = Vector3.new(9000, 9000, 9000) * math.huge
        else
            v.BrickColor = BrickColor.new("Deep blue")
            v:WaitForChild("BodyPosition").P = 10000
            v:WaitForChild("BodyPosition").D = 800
            v:WaitForChild("BodyPosition").MaxForce = Vector3.new(1, 1, 1) * 17000
            v:WaitForChild("BodyGyro").P = 1200
            v:WaitForChild("BodyGyro").D = 140
            v:WaitForChild("BodyGyro").MaxTorque = Vector3.new(1, 1, 1) * 200
        end
    end
end)

_G["带来树"] = function(tree)

    _G["树的种类"] = tree
    _G["斧头"], _G["伤害"] = _G["检查斧头"](_G["树的种类"])
    if _G["伤害"] == nil then
        return
    end
    _G["木头"] = _G["找木头"](_G["树的种类"])
    _G["树加入"] = nil
    _G["树砍好了"] = false
    if _G["木头"] == false then
        return _G["提醒"]("not find " .. _G["树的种类"])
    end

    _G["树加入"] = Workspace.LogModels.ChildAdded:Connect(function(tree)
        tree:WaitForChild('Owner', 60)
        tree.PrimaryPart = tree:FindFirstChild("WoodSection")
        if tree.Owner.Value == _G["自己"] and tree.TreeClass.Value == _G["树的种类"] then

            _G["树砍好了"] = true

            for i = 1, 25, 1 do
                _G["拉东西"]:FireServer(tree)
                tree:PivotTo(_G["菜单"]["树放置的地点"])
                game["Run Service"].Heartbeat:wait()
            end

            if _G["树的种类"] == "LoneCave" then
                _G['菜单']['带来幻影拿斧头']:Disconnect()
                _G['菜单']['带来幻影拿斧头'] = nil

            end

            _G["树加入"]:Disconnect()
            _G["树加入"] = nil

        end
    end)
    if _G["树的种类"] == "LoneCave" then

        _G['菜单']['带来幻影拿斧头'] = game.Workspace.PlayerModels.ChildAdded:connect(function(v)
            v:WaitForChild('Owner')
            if v.Owner.Value == _G['自己'] and v:FindFirstChild('ToolName') then

                repeat
                    task.wait()

                until _G['自己角色']:FindFirstChild('Head') and _G['自己身体'].Health > 0

                game.ReplicatedStorage.Interaction.ClientInteracted:FireServer(v, 'Pick up tool');

            end

        end)

    end

    repeat

        if _G['自己角色']:FindFirstChild('Head') and _G['自己身体'].Health > 30 then

            _G["传送"](_G["木头"].CFrame + Vector3.new(3, 5, 0))
        end

        if _G['自己角色']:FindFirstChild('Head') and _G['自己身体'].Health > 0 then
            _G["斧头"], _G["伤害"] = _G["检查斧头"](_G["树的种类"])
        end

        spawn(function()
            _G["砍"](_G["木头"].Parent.CutEvent, _G["斧头"], 1, 0.3, _G["伤害"])
        end)

        if _G['菜单']["停止砍树"] == true then
            break
        end
        game["Run Service"].Heartbeat:wait()
    until _G["树砍好了"]

    if _G['菜单']["停止砍树"] == true then
        _G["树加入"]:Disconnect()
        _G['穿墙'](false)
        _G["树加入"] = nil
    end
end
_G["灯光"] = game:GetService("Lighting")
spawn(function()
    while game["Run Service"].Heartbeat:wait() do
        spawn(function()
            _G['自己身体'].WalkSpeed = _G['菜单']['行走速度']
        end)
        spawn(function()
            _G['自己身体'].JumpPower = _G['菜单']['跳跃提升']
        end)
        if _G["菜单"]["终日白天"] then
            _G["灯光"].TimeOfDay = ('12:00:00');
            _G["灯光"].Brightness = 0.9
        end
        if _G["菜单"]["终日黑夜"] then
            _G["灯光"].TimeOfDay = ('2:00:00');
        end
        if _G["菜单"]["消除雾"] then
            _G["灯光"].FogEnd = 1000000;
        end
        spawn(function()
            local tool = 0
            for i, v in next, _G["自己"].Backpack:GetChildren() do
                if v:IsA("Tool") and v.Name ~= "BlueprintTool" then
                    tool = tool + 1
                    
                end
            end
            if _G["自己角色"]:FindFirstChildOfClass("Tool") then
               
                tool = tool + 1
            end
            if tool>9 then
                _G['自己身体'].Health = 0   
                _G['提醒']('your have too much axe')
            end   
        end)
 
    end
  
end)
_G["卖木头"] = function()
    local oldpos = _G["自己的方块"].CFrame
    for i = 1, 10 do
        for i, v in next, game:GetService("Workspace").LogModels:GetChildren() do
            if v:FindFirstChild("Owner") then
                if v.Owner.Value == _G["自己"] then
                    _G["传送"](v.WoodSection.CFrame)
                    for i = 1, 20, 1 do
                        _G["拉东西"]:FireServer(v)
                        v:PivotTo(CFrame.new(315, 0, 85.4999924))
                        game["Run Service"].Heartbeat:wait()
                    end
                    task.wait(0.2)
                    _G["传送"](CFrame.new(315, 0, 85.4999924))
                    for i, w in next, v:GetChildren() do
                        if w.Name == "WoodSection" then
                            spawn(function()
                                for i = 1, 20, 1 do
                                    _G["传送"](CFrame.new(315, 0, 85.4999924))
                                    _G["拉东西"]:FireServer(v)
                                    w:PivotTo(CFrame.new(315, 0, 85.4999924))
                                    game["Run Service"].Heartbeat:wait()
                                end
                            end)
                            game["Run Service"].Heartbeat:wait()
                        end
                    end
                end
                task.wait()
            end
        end
        task.wait()

    end
    _G["传送"](oldpos)
end

Tab = lib:CreateTab("Player", "5012544693")
Section = Tab:Section("Player")
Section:Slider("WalkSpeed", 50, 16, 500, false, function(s)
    _G['菜单']['行走速度'] = s
end)
Section:Slider("JumpPower", 100, 60, 500, false, function(s)
    _G['菜单']['跳跃提升'] = s
end)
Section:Slider("HipHeight", 0, 0, 500, false, function(s)
    _G["自己身体"].HipHeight = s
end)
Section:Slider("Zoom Distance", 100, 1, 2000, false, function(s)
    _G["自己"].CameraMaxZoomDistance = s
end)
Section:Slider("FOV", 70, 70, 150, false, function(s)
    game.Workspace.Camera.FieldOfView = s
end)
Section:Slider("Fly Speed", 200, 50, 500, false, function(s)
    _G["菜单"]["飞行速度"] = s
end)

Section:KeyBind("Fly Key", "Q", function()
    if _G["菜单"]["飞行"] == false then

        _G["菜单"]["飞行"] = true

        _G["飞行"](true)

    else

        _G["菜单"]["飞行"] = false
        _G["飞行"](false)
    end
end)

Section:Toggle("NoClip", false, function(state)
    _G["穿墙"](state)
end)
Section:Toggle("Light", false, function(state)
    if state then
        _G["发光"] = Instance.new('PointLight', _G["自己角色"].Head)
        _G["发光"].Name = 'dark'
        _G["发光"].Range = 150
        _G["发光"].Brightness = 1.7
    else
        pcall(function()
            _G["自己角色"].Head.dark:Destroy();
        end);
    end

end)
Section:Button("Safe Death", function()
    _G['传送'](CFrame.new(0, -398, 0))
end)

Section = Tab:Section("Tp")
Section:DropDown("Select the player", {}, true, false, function(Value)
    _G["菜单"]["传送的玩家"] = Value
end)
Section:Button("Tp to Base", function()
    _G["基地"] = nil

    for i, v in next, _G["土地"]:GetChildren() do

        if tostring(v.Owner.Value) == _G["菜单"]["传送的玩家"] then
            _G["基地"] = v
            _G["传送"](v.OriginSquare.CFrame + Vector3.new(0, 5, 0))
        end
    end
    if _G["基地"] == nil then
        _G["提醒"]("Player Not Have Base")

    end
end)
Section:Button("Tp to Player", function()
    _G["传送"](_G["玩家"][_G["菜单"]["传送的玩家"]].Character.HumanoidRootPart.CFrame)
end)

Section:DropDown("Tp To Place",
    {'Spawn', 'Wood R Us', 'Land Store', 'Bridge', 'Dock', 'Palm', 'Cave', 'The Den', 'Volcano', 'Swamp',
     'Fancy Furnishings', 'Boxed Cars', 'Links Logic', 'Bobs Shack', 'Fine Arts Store', 'Ice Mountain',
     'Shrine Of Sight', 'Strange Man', 'Volcano Win', 'Ski Lodge', 'Fur Wood'}, false, false, function(Value)
        if Value == 'Wood R Us' then
            _G["传送"](CFrame.new(270, 4, 60));
        elseif Value == 'Spawn' then
            _G["传送"](CFrame.new(174, 10.5, 66));
        elseif Value == 'Land Store' then
            _G["传送"](CFrame.new(270, 3, -98));
        elseif Value == 'Bridge' then
            _G["传送"](CFrame.new(112, 37, -892));
        elseif Value == 'Dock' then
            _G["传送"](CFrame.new(1136, 0, -206));
        elseif Value == 'Palm' then
            _G["传送"](CFrame.new(2614, -4, -34));
        elseif Value == 'Cave' then
            _G["传送"](CFrame.new(3590, -177, 415));
        elseif Value == 'Volcano' then
            _G["传送"](CFrame.new(-1588, 623, 1069));
        elseif Value == 'Swamp' then
            _G["传送"](CFrame.new(-1216, 131, -822));
        elseif Value == 'Fancy Furnishings' then
            _G["传送"](CFrame.new(486, 3, -1722));
        elseif Value == 'Boxed Cars' then
            _G["传送"](CFrame.new(509, 3, -1458));
        elseif Value == 'Ice Mountain' then
            _G["传送"](CFrame.new(1487, 415, 3259));
        elseif Value == 'Links Logic' then
            _G["传送"](CFrame.new(4615, 7, -794));
        elseif Value == 'Bobs Shack' then
            _G["传送"](CFrame.new(292, 8, -2544));
        elseif Value == 'Fine Arts Store' then
            _G["传送"](CFrame.new(5217, -166, 721));
        elseif Value == 'Shrine Of Sight' then
            _G["传送"](CFrame.new(-1608, 195, 928));
        elseif Value == 'Strange Man' then
            _G["传送"](CFrame.new(1071, 16, 1141));
        elseif Value == 'Volcano Win' then
            _G["传送"](CFrame.new(-1667, 349, 1474));
        elseif Value == 'Ski Lodge' then
            _G["传送"](CFrame.new(1244, 59, 2290));
        elseif Value == 'Fur Wood' then
            _G["传送"](CFrame.new(-1080, -5, -942));
        elseif Value == 'The Den' then
            _G["传送"](CFrame.new(330.259735, 45.7998505, 1943.30823, 0.972010553, -8.07546598e-08, 0.234937176,
                7.63610259e-08, 1, 2.77986647e-08, -0.234937176, -9.08055142e-09, 0.972010553))
        end

    end)

Tab = lib:CreateTab("World", '6034287522')
Section = Tab:Section("World")
Section:Toggle("Always Day", false, function(state)
    _G["菜单"]["终日白天"] = state

end)
Section:Toggle("Always Night", false, function(state)
    _G["菜单"]["终日黑夜"] = state

end)
Section:Toggle("Remove Fog", false, function(state)
    _G["菜单"]["消除雾"] = state

end)
_G["灯光"].GlobalShadows = false

local shadows = Section:Toggle("Always Shadows", true, function(state)
    _G["灯光"].GlobalShadows = state

end)

Section:Toggle("Walk On Water", false, function(Value)
    for i, v in next, game.Workspace.Water:GetChildren() do
        if v.ClassName == 'Part' then
            v.CanCollide = Value
        end
    end
    for i, v in next, game.Workspace.Bridge.VerticalLiftBridge.WaterModel:GetChildren() do
        if v:IsA('BasePart') then
            v.CanCollide = Value;
        end
    end
end)
Section:Toggle("Remove Water", false, function(Value)
    for i, v in next, game.Workspace.Water:GetChildren() do
        if v.Name == "Water" then
            if Value then
                v.Transparency = 1
            else
                v.Transparency = 0
            end
        end
    end
end)
Section:Button("Remove Volcano Boulders", function()
    game:GetService("Workspace")["Region_Volcano"].PartSpawner:Destroy()
end)
Section:Toggle("Remove Water", false, function(Value)
    for i, v in next, game:GetService("Workspace").Bridge.VerticalLiftBridge.Lift:GetChildren() do
        if Value then
            v.CFrame = v.CFrame + Vector3.new(0, -26, 0)
        else
            v.CFrame = v.CFrame + Vector3.new(0, 26, 0)
        end

    end
end)
Section:Button("Bring Swamp Bridge", function()
    local oldPos = _G['自己的方块'].CFrame;
    local slab = game:GetService('Workspace')['Region_Mountainside'].SlabRegen:FindFirstChild('Slab')
    if slab and not slab.PrimaryPart then
        slab.PrimaryPart = slab.PushMe;
    end
    wait()
    for i = 1, 5, 1 do
        _G['拉东西']:FireServer(slab.PrimaryPart);
        slab:PivotTo(oldPos);
        _G['拉东西']:FireServer(slab.Slider);
        task.wait()
    end

end)
_G['岩浆'] = nil
pcall(function()
    for _, v in next, Workspace.Region_Volcano:GetChildren() do
        if v:FindFirstChild("Lava") and v.Lava.CFrame ==
            CFrame.new(-1675.2002, 255.002533, 1284.19983, 0.866007268, 0, 0.500031412, 0, 1, 0, -0.500031412, 0,
                0.866007268) then
            wait()
            _G['岩浆'] = v.Lava
        end
    end
    _G['岩浆'].Size = Vector3.new(0, 0, 0)
    
end)

_G["处理树"] = function(wood, saw)

    _G['斧头'], _G['伤害'] = _G['检查斧头'](wood.TreeClass.Value)
    if not _G['伤害'] then
        return _G['提醒']('you need one axe')
    end

    _G["锯木机"] = saw.Particles.CFrame + Vector3.new(0.7, 0, 0)
    _G['保留'] = nil
    local oldpos = _G["自己"].Character.HumanoidRootPart.CFrame
    for _, v in next, wood:GetChildren() do
        if v.Name == "WoodSection" and v:WaitForChild("ID").Value ~= 1 and #v:FindFirstChild("ChildIDs"):GetChildren() ==
            0 and v:FindFirstChild("ParentID") and v.ParentID.Value ~= 1 then
            _G['保留'] = (not _G['保留'] and v) or _G['保留']

            if v.Size.Z < _G['保留'].Size.Z then
                wait()
                _G['保留'] = v
            end

        end

    end
    _G['烧毁'] = nil
    
    for _, v in next, wood:GetChildren() do
        if v.Name == "WoodSection" and v:WaitForChild("ID").Value == _G['保留'].ParentID.Value then
            wait()
            _G['烧毁'] = v
        end
    end
    if not _G['烧毁'] or not _G['保留'] then
        return _G['提醒']['cant mod this wood']
    end
    _G["菜单"]["飞行"] = true
    spawn(function()
        _G['飞行'](true)
    end)
    _G['旧的飞行速度'] = _G['菜单']['飞行速度']
    _G['菜单']['飞行速度'] = 0

    _G['传送'](wood.WoodSection.CFrame)
    repeat
        spawn(function()
            _G['拉东西']:FireServer(wood)
            wood:PivotTo(CFrame.new(-1675, 500, 1282) * CFrame.Angles(0, -1880, 0))

            _G['岩浆'].CFrame = _G['烧毁'].CFrame
        end)

        game["Run Service"].Heartbeat:wait()
    until _G['烧毁']:FindFirstChild("LavaFire")
    _G['烧毁']:FindFirstChild('LavaFire'):Destroy();
    for i = 1, 30, 4 do
        wood:PivotTo(CFrame.new(-904, 131, -3396))
        _G['拉东西']:FireServer(wood)
        game["Run Service"].Heartbeat:wait()
    end
    _G['传送'](_G['烧毁'].CFrame)

    for i = 1, 15, 1 do

        _G['拉东西']:FireServer(wood)
        _G['烧毁']:PivotTo(CFrame.new(315, 5, 85.4999924))
        _G['拉东西']:FireServer(wood)
        game["Run Service"].Heartbeat:wait()
    end
    repeat
        task.wait()
    until _G['烧毁'] == nil or _G['烧毁'].Parent == nil
    for i=1,4 do
        game.ReplicatedStorage.TestPing:InvokeServer();
    end
    local done = false
    local getwood = game:GetService("Workspace").LogModels.ChildAdded:Connect(function(wood)
        wood:WaitForChild("Owner",60)
        wood.PrimaryPart = wood:FindFirstChild("WoodSection")
        if wood.Owner.Value == _G['自己'] then
            done = true
        end
    end)

    _G["菜单"]["飞行"] = false
    spawn(function()
        _G['飞行'](false)
    end)
    _G['菜单']['飞行速度'] = _G['旧的飞行速度']
    _G['传送'](CFrame.new(wood.WoodSection.CFrame.p) + Vector3.new(3, 0, 0))

    spawn(function()
        repeat
            _G['拉东西']:FireServer(wood)
            _G['保留'].Velocity = Vector3.new()
            _G['保留'].RotVelocity = Vector3.new()
            _G['保留']:PivotTo(_G["锯木机"])
            game["Run Service"].Heartbeat:wait()
        until done == true

    end)

    repeat

        _G['传送'](CFrame.new(wood.WoodSection.CFrame.p) + Vector3.new(5, 0, 0))

        game["Run Service"].Heartbeat:wait()
        spawn(function()
            _G['砍'](wood.CutEvent, _G['斧头'], 1, 0.3, _G['伤害'])
        end)
    until done == true
    getwood:Disconnect()
    getwood = nil
    _G["传送"](oldpos)

end
Tab = lib:CreateTab("Wood", "6034503369")
Section = Tab:Section("Bring Tree")

Section:DropDown("Select Tree",
    {'Generic', 'GoldSwampy', 'CaveCrawler', 'Cherry', 'Frost', 'Volcano', 'Oak', 'Walnut', 'Birch', 'SnowGlow', 'Pine',
     'GreenSwampy', 'Koa', 'Palm', 'LoneCave', 'Spooky', 'SpookyNeon'}, false, false, function(Value)
        _G["菜单"]["选择的树"] = Value
    end)
Section:TextBox("Tree Amount", "1", function(s)
    _G["菜单"]["带来树的数量"] = tonumber(s)
end)
Section:Button("Bring", function()
    _G["菜单"]["树放置的地点"] = _G["自己的方块"].CFrame
    _G["菜单"]["停止砍树"] = false
    for i = 1, _G["菜单"]["带来树的数量"] do
        _G["带来树"](_G["菜单"]["选择的树"])
        task.wait()
    end

    _G["传送"](_G["菜单"]["树放置的地点"])
end)

Section:Button("Abort", function()
    _G["菜单"]["停止砍树"] = true
end)

Section = Tab:Section("Mod Wood")

Section:Button("Mod Wood", function()

    local wood, saw
    if _G['菜单']['正在处理树'] == true then
        return _G['提醒']('you are using this feature')
    end
    _G['菜单']['正在处理树'] = true
    _G['提醒']('Click one Wood and Sawmill')
    local clicked = _G["鼠标"].Button1Up:Connect(function()
        wait()
        local obj = _G["鼠标"].Target.Parent
        if obj:FindFirstChild('Settings') and obj.Settings:FindFirstChild('DimZ') then
            saw = obj
            _G['提醒']('Sawmill Selected')
        elseif obj.Parent:FindFirstChild('Settings') and obj.Parent.Settings:FindFirstChild('DimZ') then
            saw = obj.Parent
            _G['提醒']('Sawmill Selected')

        end

        if obj:FindFirstChild("Owner") and obj.Owner.Value == _G["自己"] and obj:FindFirstChild("WoodSection") and
            not obj:FindFirstAncestor("TreeRegion") and not obj:FindFirstChild "RootCut" then
            wait()
            wood = obj
            _G['提醒']('Wood Selected')
        end

    end)
    repeat
        task.wait(0.1)
    until wood ~= nil and saw ~= nil

    clicked:Disconnect()
    clicked = nil
    _G["处理树"](wood, saw)
    _G['菜单']['正在处理树'] = false
end)
Section = Tab:Section("Misc")
Section:Button("Cut Tree Joints", function()
    local wood

    _G['提醒']('Click one Wood')
    local clicked = _G["鼠标"].Button1Up:Connect(function()
        wait()
        local obj = _G["鼠标"].Target.Parent

        if obj:FindFirstChild("Owner") and obj.Owner.Value == _G["自己"] and obj:FindFirstChild("WoodSection") and
            not obj:FindFirstAncestor("TreeRegion") and not obj:FindFirstChild "RootCut" then

            wait()
            wood = obj
            _G['提醒']('Clicked')
        end

    end)
    repeat
        task.wait(0.1)
    until wood ~= nil
    clicked:Disconnect()
    clicked = nil
    _G['需要被砍的树'] = {}
    for i, v in next, wood:GetChildren() do
        if v:FindFirstChild('Tree Weld') then
            table.insert(_G['需要被砍的树'], v)
        end
    end
    _G['斧头'], _G['伤害'] = _G['检查斧头'](wood.TreeClass.Value)
    if not _G['伤害'] then
        return _G['you need one axe']
    end
    local done = false
    local getwood
    getwood = game:GetService("Workspace").LogModels.ChildAdded:Connect(function(wood)
        wood:WaitForChild("Owner")
        if wood.Owner.Value == _G['自己'] then
            done = true
        end
    end)

    for i, v in next, _G['需要被砍的树'] do

        _G['传送'](CFrame.new(v.Parent.WoodSection.CFrame.p) - Vector3.new(3, 0, 0))

        repeat
            _G['斧头'], _G['伤害'] = _G['检查斧头'](v.Parent.TreeClass.Value)

            _G['砍'](v.Parent.CutEvent, _G['斧头'], v.ID.Value, v.Size.Y - 0.1, _G['伤害'])

            game["Run Service"].Heartbeat:wait()
        until done == true
        done = false

        task.wait(0.1)
    end
    pcall(function()
        getwood:Disconnect()
        getwood = nil
    end)

end)
Section:Toggle("Hard Dragger", false, function(Value)
    _G["菜单"]["大力"] = Value

end)
Section:Toggle("View phantom tree", false, function(Value)
    if Value then
        local wood = nil
        for i, v in next, game.Workspace:GetChildren() do
            if v.Name == "TreeRegion" and v:FindFirstChildOfClass("Model") then
                if v.Model.TreeClass.Value == "LoneCave" then
                    game.Workspace.Camera.CameraSubject = v.Model.WoodSection
                    wood = true
                end
            end
        end
        if not wood then
            return _G['提醒']("Not Found Phantom Tree ")
        end
    else
        game.Workspace.Camera.CameraSubject = _G['自己身体']
    end

end)
_G['点击卖木板'] = nil
_G['鼠标移动'] = nil
Section:Toggle("Click to Sell Plank", false, function(Value)
    if Value then
        _G['点击卖木头选择框'] = Instance.new("SelectionBox", game.Workspace.PlayerModels)

        _G['鼠标移动'] = _G['鼠标'].Move:Connect(function()
            _G['点击'] = _G['鼠标'].Target
            if _G['点击'].Parent:FindFirstChild("Owner") and _G['点击'].Parent.Owner.Value == _G['自己'] and
                _G['点击'].Parent:FindFirstChild("TreeClass") and _G['点击']:FindFirstAncestor("PlayerModels") then

                _G['点击卖木头选择框'].LineThickness = 0.1
                _G['点击卖木头选择框'].Adornee = _G['鼠标'].Target
                _G['点击卖木头选择框'].Color3 = Color3.new(1, 0, 0)
            else
                _G['点击卖木头选择框'].Adornee = game.Workspace.PlayerModels
            end
        end)
        _G['点击卖木板'] = _G['鼠标'].Button1Up:Connect(function()
            _G['点击2'] = _G['鼠标'].Target
            if _G['点击2'].Parent:FindFirstChild("Owner") and _G['点击2'].Parent.Owner.Value == _G['自己'] and
                _G['点击2'].Parent:FindFirstChild("TreeClass") and
                _G['点击2'].Parent:FindFirstAncestor("PlayerModels") then
                for i = 1, 30, 1 do
                    _G['拉东西']:FireServer(_G['点击2'].Parent)

                    _G['点击2'].Parent:PivotTo(CFrame.new(315, 0, 85.4999924))
                    game["Run Service"].Heartbeat:wait()
                end
                _G['点击2'].Anchored = true
            end
        end)

    else
        pcall(function()
            _G['点击卖木头选择框']:Destroy()
        end)

        _G['点击卖木板']:Disconnect()
        _G['鼠标移动']:Disconnect()
        _G['点击卖木板'] = nil
        _G['鼠标移动'] = nil

    end

end)

Section:Button("Bring All Tree", function()
    local oldpos = _G["自己的方块"].CFrame

    for i, v in next, game:GetService("Workspace").LogModels:GetChildren() do
        if v:FindFirstChild("Owner") then
            if v.Owner.Value == _G["自己"] then
                _G["传送"](v.WoodSection.CFrame)
                for i = 1, 20, 1 do
                    _G["拉东西"]:FireServer(v)
                    v:PivotTo(oldpos)
                    game:GetService 'RunService'.Stepped:wait();
                end

            end
            task.wait()
        end
    end
    task.wait()

    _G["传送"](oldpos)
    _G['提醒']('Done')
end)
Section:Button("Sell All Tree", function()
    _G['卖木头']()
    _G['提醒']('Done')
end)

Section:Button("Bring All Plank", function()
    local oldpos = _G['自己的方块'].CFrame
    for i, v in next, game.Workspace.PlayerModels:GetChildren() do

        if v.Name == "Plank" and v:findFirstChild("Owner") then
            if v.Owner.Value == _G['自己'] then

                for i, w in next, v:GetChildren() do
                    if w.Name == "WoodSection" then
                        _G['传送'](w.CFrame)
                        for i = 1, 30, 1 do

                            _G['拉东西']:FireServer(v)
                            v:PivotTo(oldpos)
                            game:GetService 'RunService'.Stepped:wait();
                        end

                    end
                end
                task.wait()
            end
        end
    end
    _G['传送'](oldpos)
    _G['提醒']('Done')
end)

Section:Button("Sell All Plank", function()
    local oldpos = _G['自己的方块'].CFrame
    for i, v in next, game.Workspace.PlayerModels:GetChildren() do

        if v.Name == "Plank" and v:findFirstChild("Owner") then
            if v.Owner.Value == _G['自己'] then

                for i, w in next, v:GetChildren() do
                    if w.Name == "WoodSection" then
                        _G['传送'](w.CFrame)
                        for i = 1, 30,1 do

                            _G['拉东西']:FireServer(v)
                            v:PivotTo(CFrame.new(315, 0, 85.4999924))
                            w.CanCollide=true

                            game:GetService 'RunService'.Stepped:wait();

                        end
                        w.Anchored = true
                    end
                end
                task.wait()
            end
        end
    end
    _G['传送'](oldpos)
    _G['提醒']('Done')
end)
_G['获得土地'] = function()
    local pl = nil
    for i, v in next, _G['土地']:GetChildren() do

        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
            pl = v
        end
    end
    return pl
end

_G['加载保存服务器'] = game.ReplicatedStorage.LoadSaveRequests
_G['是否可以加载'] = function()
    if not _G['加载保存服务器'].ClientMayLoad:InvokeServer(_G['自己']) then
        _G['提醒']("Load is on cooldown. Waiting...")
        repeat
            wait()
        until _G['加载保存服务器'].ClientMayLoad:InvokeServer(_G['自己'])
    end
    return true
end
_G['加载'] = function(slot)

    _G['是否可以加载']()
    wait()
    _G['加载保存服务器'].RequestLoad:InvokeServer(slot, _G['自己'])

end
_G['保存基地'] = function(slot)
    library:Notify("Dark X", "Are you sure you want to replace all existing data", true, function()
        _G['加载保存服务器'].RequestSave:InvokeServer(slot, _G['自己'])
        _G['提醒']("Slot saved successfully")
    end)

end
_G['扩大土地'] = function(pos)
    local a
    for i, v in next, _G['土地']:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == _G['自己'] then
            a = v

        end
    end

    game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(a, pos)

end
_G['擦除选择的物品'] = function()
    _G['擦除'] = false

    for i, v in next, game.Workspace.PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G["菜单"]["擦去的玩家"] then
            if v:FindFirstChild("Type") and v.Type.Value == _G['菜单']['擦去的东西'] then
                _G['擦除'] = true
                game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(v)
                repeat

                    task.wait()
                until v.Parent == nil
            end
        end
    end

    if not _G['擦除'] then
        _G['提醒']("Failed to find a selected type")
    end
end
Tab = lib:CreateTab("Slot", "6031090999")

Section = Tab:Section("Slot")
Section:Slider("select slot", 1, 1, 6, false, function(s)
    _G['菜单']['存档'] = s
end)
Section:Toggle("Fast Load", false, function(Value)
    _G['菜单']['快速加载'] = Value
end)
Section:Button("Load Base", function()
    _G['加载'](_G['菜单']['存档'])
end)
Section:Button("Save Base", function()
    _G['保存基地'](_G['菜单']['存档'])
end)
Section:Button("Sell Sold Sign", function()
    for i, v in next, game.Workspace.PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == _G['自己'] then
            if v:FindFirstChild("ItemName") and v.ItemName.Value == "PropertySoldSign" then
                _G['传送'](CFrame.new(v.Main.CFrame.p) + Vector3.new(0, 0, 2))
                game.ReplicatedStorage.Interaction.ClientInteracted:FireServer(v, "Take down sold sign")
                for i = 1, 30, 1 do
                    _G['拉东西']:FireServer(v)
                    v.Main.CFrame = CFrame.new(314.54, -0.5, 86.823)
                    game["Run Service"].Heartbeat:wait()
                end
            end
        end
    end
end)
Section = Tab:Section("Land")
Section:Button("Free Land", function()
    local land = _G['获得土地']()
    _G['传送'](land.OriginSquare.CFrame + Vector3.new(0, 3, 0))
    game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(land, land.OriginSquare.CFrame.p +
        Vector3.new(0, 3, 0))

end)
Section:Button("Max Land", function()
    local b
    for i, v in next, _G['土地']:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == _G['自己'] then
            b = v.OriginSquare
        end
    end
    if not b then
        local land = _G['获得土地']()
        _G['传送'](land.OriginSquare.CFrame + Vector3.new(0, 3, 0))
        game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(land, land.OriginSquare.CFrame.p +
            Vector3.new(0, 3, 0))
    end
    wait(0.5)
    _G['扩大土地'](CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z))
    _G['扩大土地'](CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z))
    _G['扩大土地'](CFrame.new(b.Position.X, b.Position.Y, b.Position.Z + 40))
    _G['扩大土地'](CFrame.new(b.Position.X, b.Position.Y, b.Position.Z - 40))
    _G['扩大土地'](CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z + 40))
    _G['扩大土地'](CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z - 40))
    _G['扩大土地'](CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z + 40))
    _G['扩大土地'](CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z - 40))
    _G['扩大土地'](CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z))
    _G['扩大土地'](CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z))
    _G['扩大土地'](CFrame.new(b.Position.X, b.Position.Y, b.Position.Z + 80))
    _G['扩大土地'](CFrame.new(b.Position.X, b.Position.Y, b.Position.Z - 80))
    _G['扩大土地'](CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z + 80))
    _G['扩大土地'](CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z - 80))
    _G['扩大土地'](CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z + 80))
    _G['扩大土地'](CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z - 80))
    _G['扩大土地'](CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z + 80))
    _G['扩大土地'](CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z + 80))
    _G['扩大土地'](CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z + 40))
    _G['扩大土地'](CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z - 40))
    _G['扩大土地'](CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z + 40))
    _G['扩大土地'](CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z - 40))
    _G['扩大土地'](CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z - 80))
    _G['扩大土地'](CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z - 80))
end)

_G['土地艺术'] = false
Section:Toggle("Land Art", false, function(Value)
    _G['土地艺术'] = Value

    local base
    local b
    local oldpos = {}
    for i, v in next, _G['土地']:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == _G['自己'] then
            if v:IsA("Part") then
                table.insert(oldpos, v.CFrame)
            end
            base = v
            b = v.OriginSquare
        end
    end
    if not b then
        return _G['提醒']("u need  a land ")
    end
    local allpos = {CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z),
                    CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z),
                    CFrame.new(b.Position.X, b.Position.Y, b.Position.Z + 40),
                    CFrame.new(b.Position.X, b.Position.Y, b.Position.Z - 40),
                    CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z + 40),
                    CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z - 40),
                    CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z + 40),
                    CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z - 40),
                    CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z),
                    CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z),
                    CFrame.new(b.Position.X, b.Position.Y, b.Position.Z + 80),
                    CFrame.new(b.Position.X, b.Position.Y, b.Position.Z - 80),
                    CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z + 80),
                    CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z - 80),
                    CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z + 80),
                    CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z - 80),
                    CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z + 80),
                    CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z + 80),
                    CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z + 40),
                    CFrame.new(b.Position.X + 80, b.Position.Y, b.Position.Z - 40),
                    CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z + 40),
                    CFrame.new(b.Position.X - 80, b.Position.Y, b.Position.Z - 40),
                    CFrame.new(b.Position.X + 40, b.Position.Y, b.Position.Z - 80),
                    CFrame.new(b.Position.X - 40, b.Position.Y, b.Position.Z - 80)}
    local ps = Instance.new("Folder", game.Workspace)
    ps.Name = "darkprview"
    for i, v in next, allpos do
        if not table.find(oldpos, v) then
            local preview = b:Clone()
            preview.Parent = ps
            preview.CFrame = v
            preview.Name = "Dark"
            preview.Transparency = 0.5
        end

    end
    local Selection = Instance.new("SelectionBox", base)
    local posmove
    local selectpos
    posmove = _G['鼠标'].Move:Connect(function()
        if _G['鼠标'].Target.Name == "Dark" then

            Selection.LineThickness = 0.1
            Selection.Adornee = _G['鼠标'].Target
        end
    end)
    local selectpos = _G['鼠标'].Button1Down:Connect(function()

        if _G['鼠标'].Target.Name == "Dark" then
            game.ReplicatedStorage.PropertyPurchasing.ClientExpandedProperty:FireServer(base, _G['鼠标'].Target.CFrame)
            _G['鼠标'].Target:Destroy()
        end
    end)
    repeat
        task.wait()
    until base.Owner.Value ~= _G['自己'] or _G['土地艺术'] == false
    for i, v in next, Workspace:GetChildren() do
        if v.Name == "darkprview" then
            v:Destroy()
        end
    end

    posmove:Disconnect()

    posmove = nil
    selectpos:Disconnect()
    selectpos = nil

    Selection:Destroy()
end)
_G['点击获得土地'] = false
_G['点击土地'] = nil
Section:Toggle("Click to Get Land", false, function(Value)
    _G['点击获得土地'] = Value

    if _G['点击获得土地'] then
        _G['点击土地'] = _G['鼠标'].Button1Down:Connect(function()

            if _G['鼠标'].Target.Parent:FindFirstChild('Owner') and _G['鼠标'].Target.Parent.Parent == _G['土地'] then
                if _G['鼠标'].Target.Parent:FindFirstChild('Owner').Value == nil then
                    _G['传送'](_G['鼠标'].Target.Parent.OriginSquare.CFrame + Vector3.new(0, 3, 0))
                    game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(_G['鼠标'].Target
                                                                                                     .Parent,
                        _G['鼠标'].Target.Parent.OriginSquare.CFrame.p + Vector3.new(0, 3, 0))

                    _G['提醒']("Done")
                else
                    _G['提醒']("This Land already Have Owner")
                end
            end
        end)
    else

        _G['点击土地']:Disconnect()
        _G['点击土地'] = nil
    end
end)

_G['等待时间'] = function(Time)

    local Start, Time = DateTime.now().UnixTimestamp, Time or 0

    while game:GetService('RunService').Stepped:Wait() do

        if Time <= DateTime.now().UnixTimestamp - Start then

            break

        end

    end

    return DateTime.now().UnixTimestamp - Start

end
_G['获得最好的时间']=function(num,dupeitem)
    local slot={}
    for i,v in next,_G['自己'].PlayerGui.LoadSaveGUI.SlotList.Main:GetChildren() do
    if v.Name=='SlotItem' and v:FindFirstChild('SlotName') and v.SlotName.Text~='Slot N' then
        table.insert(slot,v)

    end
    end
if dupeitem then
    if tonumber(slot[tonumber(num)].SizeV.Text)==1 then
        return 2
        else
            return 4+tonumber(slot[tonumber(num)].SizeV.Text)
    end
    
else
    return 3.2-tonumber(slot[tonumber(num)].SizeV.Text)/6
end
   
end

_G['复制斧头']=function()
    _G['是否可以加载']()
    wait()
    if _G['菜单']['飞行'] then
        _G['飞行'](false)
        _G['菜单']['飞行'] = false
    end
    _G['传送'](CFrame.new(0, -393, 0))
    repeat
        wait()
    until not _G['自己角色']:FindFirstChild('Head')
    _G['等待时间'](_G['获得最好的时间'](_G['自己'].CurrentSaveSlot.Value))
    _G['加载'](_G['自己'].CurrentSaveSlot.Value)
    task.wait()
end
Section = Tab:Section("Axe Dupe")
Section:TextBox("Amount", "1", function(s)
    _G['菜单']['复制斧头数量'] = tonumber(s)
end)
Section:Button("Dupe Axe", function()
    for i = 1, _G['菜单']['复制斧头数量'] do
       _G['复制斧头']()
    end

end)
Section:Toggle("Auto Dupe Axe", false, function(Value)
    if Value then
        repeat
            _G['复制斧头']()
        until _G['菜单']['自动复制斧头'] == false

    end
end)

game.ReplicatedStorage.TestPing:InvokeServer();

Section = Tab:Section("Land Dupe")
Section:DropDown("Select the player", {}, true, false, function(s)
    _G["菜单"]["复制土地到玩家"] = s
end)
_G['复制基地']=function()
   
    game.ReplicatedStorage.Interaction.UpdateUserSettings:FireServer('UserPermission', tostring( _G["菜单"]["复制土地到玩家"].UserId), 'All', true)
    _G['是否可以加载']()
    wait()
    _G['物品已加入']=false
    _G['物品加入']= game:GetService("Workspace").PlayerModels.ChildAdded:Connect(function(v)
        if v:WaitForChild("Owner") and v.Owner.Value == _G['自己'] then
            if v:WaitForChild("WoodSection" ) or v:WaitForChild("Main" )then
                if  v:WaitForChild('WoodSection') or  v:WaitForChild("ItemName") and  _G['菜单']['复制基地等待加载'] then
                    _G['物品已加入']=true
                    _G['等待时间'](_G['获得最好的时间'](_G['菜单']['复制的存档'],true))
                    game:Shutdown()
                else
                    _G['物品已加入']=true
                    _G['等待时间'](_G['获得最好的时间'](_G['菜单']['复制的存档'],true))
                    game:Shutdown()
                end
              
         
            end
        end
    end)
    task.spawn(function()
        game:GetService("ReplicatedStorage").LoadSaveRequests.RequestLoad:InvokeServer(_G['菜单']['复制的存档'], _G['自己'])
    end) 
    repeat wait()
        
    until    _G['物品已加入']==true
end
Section:Slider("select slot", 1, 1, 6, false, function(s)
    _G['菜单']['复制的存档'] = s
end)
Section:Toggle("Wait blueprint to load", false, function(Value)
   _G['菜单']['复制基地等待加载']=Value
end)
Section:Button(" Centre Square  Dupe", function()
    if _G['菜单']['复制土地到玩家']==nil then
        return _G['提醒']('Select the player')
    end
    if _G['菜单']['复制土地到玩家']==_G['自己'] then
        return _G['提醒']('You Cant dupe  Your Property To Yourself')
    end
    _G['复制基地']()



end)
Section:Button("Max Land Dupe", function()
 
    if _G['菜单']['复制土地到玩家']==nil then
        return _G['提醒']('Select the player')
    end
    if _G['菜单']['复制土地到玩家']==_G['自己'] then
        return _G['提醒']('You Cant dupe  Your Property To Yourself')
    end
    _G['复制基地']()

    game:GetService("Workspace").Effects:WaitForChild("StructureModel")
    local land = _G['获得土地']()
  
    game.ReplicatedStorage.PropertyPurchasing.ClientPurchasedProperty:FireServer(land, land.OriginSquare.CFrame.p +Vector3.new(0, 3, 0))

end)
Section = Tab:Section("Wipe")

Section:DropDown("Select the player", {}, true, false, function(s)
    _G["菜单"]["擦去的玩家"] = s
end)
Section:DropDown("Select the Type",{"Structure", 'Blueprint', 'Wire', 'Tool', 'Furniture', 'Loose Item', 'Gift', 'Plank'}, false, false, function(s)
        _G["菜单"]["擦去的东西"] = s
        if s == 'Plank' then
            _G["菜单"]["擦去的东西"] = 'TreeClass'
        end

    end)

Section:Button("Wipe", function()
    library:Notify("Dark X", "Are you sure you want to wipe all the selected options ?", true, function()
        _G['擦除选择的物品']()
    end)
end)

_G['点击删除物品'] = nil
Section:Toggle("Click to Delete", false, function(Value)
    if Value then
        _G['点击删除物品'] = _G['鼠标'].Button1Down:Connect(function()

            if _G['鼠标'].Target.Parent:FindFirstChild('Owner') and _G['鼠标'].Target.Parent.Parent ==
                game.Workspace.PlayerModels then
                if tostring(_G['鼠标'].Target.Parent:FindFirstChild('Owner').Value) == _G['菜单']['擦去的玩家'] then

                    game.ReplicatedStorage.Interaction.DestroyStructure:FireServer(_G['鼠标'].Target.Parent)
                    repeat
                        task.wait()
                    until _G['鼠标'].Target.Parent == nil
                end
            end
        end)

    else

        _G['点击删除物品']:Disconnect()
        _G['点击删除物品'] = nil
    end
end)

_G['获得商场id'] = {
    ["WoodRus"] = {
        ["Character"] = game.Workspace.Stores.WoodRUs.Thom,
        ["Name"] = "Thom",
        ["ID"] = tonumber(7)
    },
    ["FurnitureStore"] = {
        ["Character"] = game.Workspace.Stores.FurnitureStore.Corey,
        ["Name"] = "Corey",
        ["ID"] = tonumber(8)
    },
    ["CarStore"] = {
        ["Character"] = game.Workspace.Stores.CarStore.Jenny,
        ["Name"] = "Jenny",
        ["ID"] = tonumber(9)
    },
    ["ShackShop"] = {
        ["Character"] = game.Workspace.Stores.ShackShop.Bob,
        ["Name"] = "Bob",
        ["ID"] = tonumber(10)
    },
    ["FineArt"] = {
        ["Character"] = game.Workspace.Stores.FineArt.Timothy,
        ["Name"] = "Timothy",
        ["ID"] = tonumber(11)
    },
    ["LogicStore"] = {
        ["Character"] = game.Workspace.Stores.LogicStore.Lincoln,
        ["Name"] = "Lincoln",
        ["ID"] = tonumber(12)
    }
}
_G['找到物品'] = function(item)

    local ws, cu
    for i, v in next, game.Workspace.Stores:GetChildren() do
        if v.Name == "ShopItems" and v:FindFirstChild("Box") then
            for i, j in next, v:GetChildren() do
                if j.BoxItemName.Value == item then
                    for i, w in next, v:GetChildren() do

                        if w.BoxItemName.Value == "Bed1" or w.BoxItemName.Value == "Seat_Couch" then
                            ws = _G['获得商场id'].FurnitureStore
                            cu = game.Workspace.Stores.FurnitureStore.Counter.CFrame + Vector3.new(0, .6, 0)
                        elseif w.BoxItemName.Value == "Sawmill" or w.BoxItemName.Value == "Sawmill2" then
                            ws = _G['获得商场id'].WoodRus
                            cu = game.Workspace.Stores.WoodRUs.Counter.CFrame + Vector3.new(0, .6, 0)
                        elseif w.BoxItemName.Value == "Trailer2" or w.BoxItemName.Value == "UtilityTruck2" then
                            ws = _G['获得商场id'].CarStore
                            cu = game.Workspace.Stores.CarStore.Counter.CFrame + Vector3.new(0, .6, 0)
                        elseif w.BoxItemName.Value == "CanOfWorms" or w.BoxItemName.Value == "Dynamite" then
                            ws = _G['获得商场id'].ShackShop
                            cu = game.Workspace.Stores.ShackShop.Counter.CFrame + Vector3.new(0, .6, 0)
                        elseif w.BoxItemName.Value == "Painting1" or w.BoxItemName.Value == "Painting2" then
                            ws = _G['获得商场id'].FineArt
                            cu = game.Workspace.Stores.FineArt.Counter.CFrame + Vector3.new(0, .6, 0)
                        elseif w.BoxItemName.Value == "GateXOR" or w.BoxItemName.Value == "NeonWireOrange" then
                            ws = _G['获得商场id'].LogicStore
                            cu = game.Workspace.Stores.LogicStore.Counter.CFrame + Vector3.new(0, .6, 0)

                        end
                    end
                    return j, ws, cu
                end
            end
        end
    end
end

_G['传送物品'] = nil
_G["买"] = function(itemname)
    _G['物品'], _G['商人id'], _G['收银台'] = _G['找到物品'](itemname)

    if _G['物品'] == nil then
        _G['提醒']('Wait for the item to refresh')
        repeat
            if _G['菜单']['自动购买停止'] == true then
                break
            end

            task.wait()
            _G['物品'], _G['商人id'], _G['收银台'] = _G['找到物品'](itemname)
        until _G['物品'] ~= nil

    end
    if (_G['物品'].PrimaryPart.CFrame.p - _G['自己'].Character.HumanoidRootPart.CFrame.p).magnitude > 20 then
        _G['传送'](_G['物品'].Main.CFrame - Vector3.new(2, -3, 2))
    end
    game.ReplicatedStorage.TestPing:InvokeServer();

 
    for i = 1, 10 do

        for i = 1, 6, 8 do
            _G['拉东西']:FireServer(_G['物品']);

            game["Run Service"].Heartbeat:wait();
        end

        _G['物品'].PrimaryPart.CFrame = _G['收银台']

        game.ReplicatedStorage.TestPing:InvokeServer();
       

        if (_G['物品'].PrimaryPart.CFrame.p - _G['收银台'].p).magnitude < 7 then
            break
        end
        game["Run Service"].Heartbeat:wait();
    end
    repeat
        if _G['菜单']['自动购买停止'] == true then
            break
        end

        game.ReplicatedStorage.NPCDialog.PlayerChatted:InvokeServer(_G['商人id'], "ConfirmPurchase")
        wait()
    until _G['物品'].Owner.Value == _G['自己'] and _G['物品'].Parent ~= "ShopItem" and
        not _G['物品']:FindFirstChild("BoxItemName")
end

_G['自动购买v2'] = function(itemname, count, loopautobuy)
    _G['自动数量'] = count
    if loopautobuy then
        _G['自动数量'] = 9e9
    end
    if _G['商品价格'](itemname, count) > _G["自己"].leaderstats.Money.Value then
        return _G['提醒']('you not have enough money')
    end

    _G['传送物品'] = game.Workspace.PlayerModels.ChildAdded:Connect(function(v)

        v:WaitForChild('Owner', 60)
        if v.Owner.Value == _G['自己'] then

            for i = 1, 15, 1 do
                pcall(function()
                    _G['拉东西']:FireServer(v)
                    v:PivotTo(_G['菜单']['自动购买的地点'])
                    game["Run Service"].Heartbeat:wait()
                end)

            end
        end
    end)
    _G['数量'] = 0
    for i = 1, _G['自动数量'] do

        if _G['菜单']['自动购买停止'] == true then
            break
        end

        _G['买'](itemname)
        _G['数量'] = _G['数量'] + 1

        _G['自己'].PlayerGui.MoneyDisplayGui.Text.Text = "Autobuying:" .. tostring(_G['数量']) .. "/" ..
                                                               tostring(count)
        task.wait()
    end
    _G['自己'].PlayerGui.MoneyDisplayGui.Text.Text = tostring(_G["自己"].leaderstats.Money.Value)
    spawn(function()
        pcall(function()
            _G['传送物品']:Disconnect();
            _G['传送物品'] = nil;
        end)
    end)
  
end
_G['获得商品名字'] = function()
    _G['全部商品'] = {}
    for i, v in next, game.Workspace.Stores:GetChildren() do
        if v.Name == "ShopItems" and v:FindFirstChild("Box") then
            for i, v in next, v:GetChildren() do
                if not table.find(_G['全部商品'], v.BoxItemName.Value) then
                    table.insert(_G['全部商品'], v.BoxItemName.Value)
                end
            end
        end
    end
    return _G['全部商品']
end
_G['商品价格'] = function(item, count)
    _G['价格'] = 0
    for i, v in next, game.ReplicatedStorage.ClientItemInfo:GetChildren() do
        if v.Name == item and v:FindFirstChild("Price") then
            _G['价格'] = v.Price.Value * count
        end
    end
    return _G['价格']
end
_G['升级物品名字'] = function()
    _G['所有物品'] = _G['获得商品名字']()
    _G['商品的价格'] = {}
    for i, v in next, _G['所有物品'] do
        table.insert(_G['商品的价格'], v .. '--' .. _G['商品价格'](v, 1))
    end
    return _G['商品的价格']
end
_G['获得所有商店名字'] = function()
    _G['商店名字'] = {'All'}
    for i, v in next, game.Workspace.Stores:GetChildren() do
        if v:FindFirstChild('Counter') then
            table.insert(_G['商店名字'], v.Name)
        end
    end
    return _G['商店名字']
end
_G['获得商店物品'] = function(store)
    if store == 'All' then
        return _G['升级物品名字']()
    end
    _G['名字'] = {}
    for i, v in next, game.Workspace.Stores:GetChildren() do
        if v.Name == "ShopItems" and v:FindFirstChild("Box") then
            for i, w in next, v:GetChildren() do
                if w.BoxItemName.Value == "Bed1" or w.BoxItemName.Value == "Seat_Couch" then
                    if store == 'FurnitureStore' then
                        for i, w in next, v:GetChildren() do
                            if not table.find(_G['名字'], w.BoxItemName.Value) then
                                table.insert(_G['名字'], w.BoxItemName.Value)
                            end

                        end
                    end
                elseif w.BoxItemName.Value == "Sawmill" or w.BoxItemName.Value == "Sawmill2" then

                    if store == 'WoodRUs' then
                        for i, x in next, v:GetChildren() do

                            if not table.find(_G['名字'], x.BoxItemName.Value) then

                                table.insert(_G['名字'], x.BoxItemName.Value)
                            end

                        end
                    end
                elseif w.BoxItemName.Value == "Trailer2" or w.BoxItemName.Value == "UtilityTruck2" then
                    if store == 'CarStore' then
                        for i, w in next, v:GetChildren() do
                            if not table.find(_G['名字'], w.BoxItemName.Value) then
                                table.insert(_G['名字'], w.BoxItemName.Value)
                            end

                        end
                    end
                elseif w.BoxItemName.Value == "CanOfWorms" or w.BoxItemName.Value == "Dynamite" then
                    if store == 'ShackShop' then
                        for i, w in next, v:GetChildren() do
                            if not table.find(_G['名字'], w.BoxItemName.Value) then
                                table.insert(_G['名字'], w.BoxItemName.Value)
                            end

                        end
                    end
                elseif w.BoxItemName.Value == "Painting1" or w.BoxItemName.Value == "Painting2" then
                    if store == 'FineArt' then
                        for i, w in next, v:GetChildren() do
                            if not table.find(_G['名字'], w.BoxItemName.Value) then
                                table.insert(_G['名字'], w.BoxItemName.Value)
                            end

                        end
                    end
                elseif w.BoxItemName.Value == "GateXOR" or w.BoxItemName.Value == "NeonWireOrange" then
                    if store == 'LogicStore' then
                        for i, w in next, v:GetChildren() do
                            if not table.find(_G['名字'], w.BoxItemName.Value) then
                                table.insert(_G['名字'], w.BoxItemName.Value)
                            end

                        end

                    end
                end

            end

        end

    end

    return _G['名字']

end
_G['升级选择的物品名字'] = function(store)
    _G['物品'] = {}
    if store == 'All' then
        return _G['获得商店物品'](store)
    end
    local item = _G['获得商店物品'](store)

    for i, v in next, item do

        table.insert(_G['物品'], v .. '--' .. _G['商品价格'](v, 1))
    end
    return _G['物品']
end
Tab = lib:CreateTab("Auto Buy ", "6031289461")
Section = Tab:Section("Auto Buy")
Section:DropDown("Select Store", _G['获得所有商店名字'](), false, false, function(s)
    _G["菜单"]["商店名字"] = s
    _G['物品选择']:SetOptions(_G['升级选择的物品名字'](_G["菜单"]["商店名字"]))
end)
_G['物品选择'] = Section:DropDown("Select Item", _G['升级选择的物品名字'](_G["菜单"]["商店名字"]),
    false, false, function(s)
        _G["菜单"]["自动购买的物品"] = s
    end)

Section:TextBox("Amount", "1", function(s)
    _G['菜单']['自动购买的数量'] = tonumber(s)
end)
Section:Button("Buy", function()
    _G['菜单']['自动购买停止'] = false
    _G['菜单']['自动购买的地点'] = _G['自己的方块'].CFrame

    _G['自动购买v2'](string.split(_G['菜单']['自动购买的物品'], "--")[1],
        _G['菜单']['自动购买的数量'])

    _G['传送'](_G['菜单']['自动购买的地点'])
end)
Section:Button("Abort", function()
    _G['菜单']['自动购买停止'] = true
end)
Section:Toggle("Loop Auto Buy", false, function(Value)
    if Value then
        _G['菜单']['自动购买停止'] = false
        _G['菜单']['自动购买的地点'] = _G['自己的方块'].CFrame

        _G['自动购买v2'](string.split(_G['菜单']['自动购买的物品'], "--")[1], 0, true)

        _G['传送'](_G['菜单']['自动购买的地点'])
    else
        _G['菜单']['自动购买停止'] = true
    end
end)
Section = Tab:Section("Other")

Section:Toggle("Auto Buy All BluePrints", false, function(Value)
    if Value then
        local open = game.Workspace.PlayerModels.ChildAdded:connect(function(v)
            spawn(function()
                if v.Type.Value == "Blueprint" then
                    game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v, "Open box")
                end
            end)

        end)
        _G['菜单']['自动购买停止'] = false
        for i, v in next, game.ReplicatedStorage.ClientItemInfo:GetChildren() do
            if v:FindFirstChild("WoodCost") then

                if not _G['自己'].PlayerBlueprints.Blueprints:FindFirstChild(v.Name) then
                    _G['自动购买v2'](v.Name, 1)

                end

            end

        end
        wait(1)
        open:Disconnect();
        open = nil;
    else
        _G['菜单']['自动购买停止'] = true
    end
end)
Section:Button("Toll Bridge", function()
    game.ReplicatedStorage.NPCDialog.PlayerChatted:InvokeServer({
        ["ID"] = 15,
        ["Character"] = "name",
        ["Name"] = "name",
        ["Dialog"] = 'Dialog'
    }, "ConfirmPurchase");

end)
Section:Button("Ferry Ticket", function()
    game.ReplicatedStorage.NPCDialog.PlayerChatted:InvokeServer({
        ["ID"] = 13,
        ["Character"] = "name",
        ["Name"] = "name",
        ["Dialog"] = 'Dialog'
    }, "ConfirmPurchase");

end)
Section:Button("Power Of Ease", function()
    game.ReplicatedStorage.NPCDialog.PlayerChatted:InvokeServer({
        ["ID"] = 3,
        ["Character"] = "name",
        ["Name"] = "name",
        ["Dialog"] = 'Dialog'
    }, "ConfirmPurchase");

end)

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(4, 0, 255)
Frame.BackgroundTransparency = 0.8
Frame.BorderColor3 = Color3.new(0.09, 0.137, 0.776)
Frame.BorderSizePixel = 2
Frame.Position = UDim2.new(0, 0, 0, 0)
Frame.Size = UDim2.new(0, 0, 0, 0)
Frame.Name = 'Lasso Tool'
_G['在框内'] = function(screenpos, frame)
    local xPos = frame.AbsolutePosition.X
    local yPos = frame.AbsolutePosition.Y

    local xize = frame.AbsoluteSize.X
    local ySize = frame.AbsoluteSize.Y

    local check1 = screenpos.X >= xPos and screenpos.X <= xPos + xize
    local check2 = screenpos.X <= xPos and screenpos.X >= xPos + xize

    local check3 = screenpos.Y >= yPos and screenpos.Y <= yPos + ySize
    local check4 = screenpos.Y <= yPos and screenpos.Y >= yPos + ySize

    local finale = (check1 and check3) or (check2 and check3) or (check1 and check4) or (check2 and check4)

    return finale
end
_G['整理鼠标移动'] = nil
_G['整理鼠标点击'] = nil
local finished = false
_G['盒子传送'] = function(name, XS, ZS, find)
    _G['菜单']['停止整理'] = false
    local Count = 0
    local ItemsToSort = {}
    finished = false
    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild(find) and v[find].Value == name and v:FindFirstChild("SelectionBox") then
            if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G['菜单']['传送的玩家'] then
                table.insert(ItemsToSort, v)
                if not v.PrimaryPart then
                    v.PrimaryPart = v:FindFirstChildOfClass "Part"
                end

                
            end
        end
    end

    local SortPreview = Instance.new("Part", game.Workspace)
    SortPreview.Size = Vector3.new(ItemsToSort[1].PrimaryPart.Size.X * XS,
        ItemsToSort[1].PrimaryPart.Size.Y * math.ceil(#ItemsToSort / (XS * ZS)), ItemsToSort[1].PrimaryPart.Size.Z * ZS)
    SortPreview.Transparency = 1
    SortPreview.CanCollide = false
    SortPreview.Anchored = true
    SortPreview.Name = "preview"
    local PreviewPos = SortPreview.Position +Vector3.new(-(SortPreview.Size.X / 2 + ItemsToSort[1].PrimaryPart.Size.X / 2),-(SortPreview.Size.Y / 2 + ItemsToSort[1].PrimaryPart.Size.Y / 2), -(SortPreview.Size.Z / 2 + ItemsToSort[1].PrimaryPart.Size.Z / 2))

    for Y = 1, math.ceil(#ItemsToSort / (XS * ZS)) do
        for X = 1, XS do
            for Z = 1, ZS do
                Count = Count + 1
                if ItemsToSort[Count] then
                    local Itm = ItemsToSort[Count]:Clone()
                    Itm.PrimaryPart.CanCollide = false
                    Itm.PrimaryPart.Transparency = 0.5
                    Itm.PrimaryPart.Orientation = Vector3.new(0, 0, 0)
                    Itm.PrimaryPart.Position = Vector3.new(PreviewPos.X + X * ItemsToSort[1].PrimaryPart.Size.X,PreviewPos.Y + Y * ItemsToSort[1].PrimaryPart.Size.Y,
                        PreviewPos.Z + Z * ItemsToSort[1].PrimaryPart.Size.Z)
                    Itm.Parent = SortPreview
                    Itm:FindFirstChild('SelectionBox'):Destroy()
                    local ItmWeld = Instance.new("WeldConstraint", Itm.PrimaryPart)
                    ItmWeld.Part0 = Itm.PrimaryPart
                    ItmWeld.Part1 = SortPreview
                    for i, v in next, Itm:GetChildren() do
                        if v.Name:match("Decal") then
                            v.Transparency = 1
                        end
                    end
                end
            end
        end
    end
    if _G['鼠标'].Target.Name ~= "Ground" and _G['鼠标'].Target.Name ~= "preview" then
        SortPreview.CFrame = CFrame.new(_G['鼠标'].Hit.X + XS / 2 * ItemsToSort[1].PrimaryPart.Size.X,
            _G['鼠标'].Hit.Y + SortPreview.Size.Y / 2, _G['鼠标'].Hit.Z + ZS / 2 * ItemsToSort[1].PrimaryPart.Size.Z)
    end
    _G['整理鼠标移动'] = _G['鼠标'].Move:Connect(function()
        if _G['鼠标'].Target.Name ~= "Ground" then
            SortPreview.CFrame = CFrame.new(_G['鼠标'].Hit.X + XS / 2 * ItemsToSort[1].PrimaryPart.Size.X,
                _G['鼠标'].Hit.Y + SortPreview.Size.Y / 2,
                _G['鼠标'].Hit.Z + ZS / 2 * ItemsToSort[1].PrimaryPart.Size.Z)
        end
    end)
    _G['整理鼠标点击'] = _G['鼠标'].Button1Down:Connect(function()

        game.Workspace.Gravity = math.huge

        _G['整理鼠标移动']:Disconnect()
        _G['整理鼠标移动'] = nil
        _G['整理鼠标点击']:Disconnect()
        _G['整理鼠标点击'] = nil

        local Count = 0
        game:GetService('Workspace').CurrentCamera.CameraSubject = game.Workspace.preview
        _G["菜单"]["飞行"] = true
        spawn(function()
            _G['飞行'](true)
        end)
        _G['穿墙'](true)
        _G['旧的飞行速度'] = _G['菜单']['飞行速度']
        _G['菜单']['飞行速度'] = 0
        spawn(function()
            for i, x in next, ItemsToSort do
                for i, v in next, x:GetChildren() do
                    if v:IsA "BasePart" and v.Name == "Main" or v.Name == "WoodSection" then
                        v.Anchored = true

                    end
                end
            end

            repeat
                wait()
                for i, x in next, ItemsToSort do
                    for i, v in next, x:GetChildren() do
                        if v:IsA "BasePart" and v.Name == "Main" or v.Name == "WoodSection" then
                            v.Velocity = Vector3.new(0, 0, 0)
                            v.RotVelocity = Vector3.new(0, 0, 0)
                        end
                    end
                end
            until finished == true
        end)

        local oldpos = _G['自己的方块'].CFrame
        for i, w in next, game.Workspace.preview:GetChildren() do
            if _G['菜单']['停止整理'] == true then
                break
            end
            if w:FindFirstChildOfClass("Part") then
                Count = Count + 1
                ItemsToSort[Count].PrimaryPart.Anchored = false
                pcall(function()
                    ItemsToSort[Count]:FindFirstChild "SelectionBox":Destroy()
                end)
                _G['传送'](CFrame.new(ItemsToSort[Count].PrimaryPart.CFrame.p) +
                                 Vector3.new(0, ItemsToSort[Count].PrimaryPart.Size.Y * 2, 0))

                repeat
                    wait()
                    ItemsToSort[Count].PrimaryPart.Anchored = false
                until ItemsToSort[Count].PrimaryPart.Anchored == false
                local dotiem = 0
                if identifyexecutor() == 'Sirhurt' then

                    repeat
                        wait()
                        _G['拉东西']:FireServer(ItemsToSort[Count]);

                    until not isnetworkowner(ItemsToSort[Count].PrimaryPart)
                    _G['拉东西']:FireServer(ItemsToSort[Count]);
                else
                    for i = 1, 4 do
                        game.ReplicatedStorage.TestPing:InvokeServer();

                    end
                end

                for i = 1, 6 do

                    for i = 1, 6, 4 do
                        _G['拉东西']:FireServer(ItemsToSort[Count]);
                        game:GetService 'RunService'.Stepped:wait();
                    end

                    ItemsToSort[Count].PrimaryPart.CFrame = w.PrimaryPart.CFrame
                    game.ReplicatedStorage.TestPing:InvokeServer();
                    game.ReplicatedStorage.TestPing:InvokeServer();
                    if (ItemsToSort[Count].PrimaryPart.CFrame.p - w.PrimaryPart.CFrame.p).magnitude < 5 then
                        break
                    end
                    task.wait()
                end

                spawn(function()
                    pcall(function()

                        w:Destroy()

                    end)

                end)

            end

        end
        for i, v in next, ItemsToSort do
            v.PrimaryPart.Anchored = false
        end

        pcall(function()

            game:GetService('Workspace').CurrentCamera.CameraSubject = _G['自己身体']
            game:GetService "Workspace":FindFirstChild "preview":Destroy()
            game.Workspace.Gravity = 198

        end)
        _G['传送'](oldpos)
        _G["菜单"]["飞行"] = false
        spawn(function()
            _G['飞行'](false)
        end)

        _G['菜单']['飞行速度'] = _G['旧的飞行速度']
        _G['穿墙'](false)
        finished = true
        _G['菜单']['停止整理'] = false
    end)
    repeat
        task.wait()
    until finished == true

end

local Tab = lib:CreateTab("Items", '6035030083')

Section = Tab:Section("Position")
Section:DropDown("Select the player", {}, true, false, function(s)
    _G["菜单"]["传送的玩家"] = s
end)
Section:Button("Set Position", function()
    pcall(function()
        game.Workspace.darkx:Destroy();
    end)
    local darkx = Instance.new("Part", game.Workspace)
    darkx.CanCollide = false
    darkx.Anchored = true
    darkx.Shape = Enum.PartType.Ball
    darkx.Color = Color3.fromRGB(0, 217, 255);
    darkx.Transparency = 0
    darkx.Size = Vector3.new(2, 2, 2)
    darkx.CFrame = _G['自己的方块'].CFrame
    darkx.Material = Enum.Material.Marble
    darkx.Name = "darkx"
end)
Section:Button("Delete Position", function()
    pcall(function()
        game.Workspace.darkx:Destroy();
    end)
end)
Section = Tab:Section("select Item")
Section:Toggle("Group Select", false, function(Value)
    if Value then
        _G['点击选择同类型物品'] = _G['鼠标'].Button1Up:Connect(function()
            local Clicked = _G['鼠标'].Target
            if Clicked.Parent:FindFirstChild("Owner") and tostring(Clicked.Parent.Owner.Value) ==
                _G["菜单"]["传送的玩家"] then
                if Clicked.Parent:FindFirstAncestor("PlayerModels") then
                    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
                        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G["菜单"]["传送的玩家"] then
                            if v:FindFirstChild("ItemName") and Clicked.Parent:FindFirstChild("ItemName") and
                                v:FindFirstChild("DraggableItem") then
                                if v.ItemName.Value == Clicked.Parent.ItemName.Value then
                                    if not v:FindFirstChild("SelectionBox") then
                                        local SB = Instance.new("SelectionBox", v)
                                        SB.LineThickness = 0.05
                                        SB.Adornee = v

                                    else
                                        v:FindFirstChild("SelectionBox"):Destroy()
                                    end
                                end
                            elseif v:FindFirstChild("PurchasedBoxItemName") and
                                Clicked.Parent:FindFirstChild("PurchasedBoxItemName") then
                                if v.PurchasedBoxItemName.Value == Clicked.Parent.PurchasedBoxItemName.Value then
                                    if not v:FindFirstChild("SelectionBox") then
                                        local SB = Instance.new("SelectionBox", v)
                                        SB.LineThickness = 0.05
                                        SB.Adornee = v
                                    else
                                        v:FindFirstChild("SelectionBox"):Destroy()
                                    end
                                end
                            elseif v:FindFirstChild("TreeClass") and Clicked.Parent:FindFirstChild("TreeClass") then
                                if v.TreeClass.Value == Clicked.Parent.TreeClass.Value then
                                    if not v:FindFirstChild("SelectionBox") then
                                        local SB = Instance.new("SelectionBox", v)
                                        SB.LineThickness = 0.05
                                        SB.Adornee = v

                                    else
                                        v:FindFirstChild("SelectionBox"):Destroy()
                                    end
                                end
                            end
                        end

                    end
                end

            end
        end)
    else
        _G['点击选择同类型物品']:Disconnect()
        _G['点击选择同类型物品'] = nil

    end

end)
Section:Toggle("Lasso Tool", false, function(Value)

    if Value then
        _G['菜单']['物品框'] = game:GetService("UserInputService").InputBegan:Connect(function(cilk)

            if cilk.UserInputType == Enum.UserInputType.MouseButton1 then
                Frame.Visible = true
                Frame.Position = UDim2.new(0, _G['鼠标'].X, 0, _G['鼠标'].Y)
                while game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) or
                    game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and
                    game:GetService("UserInputService"):IsMouseButtonPressed(Enum.UserInputType.MouseButton2) do
                    game:GetService("RunService").RenderStepped:wait()
                    Frame.Size = UDim2.new(0, _G['鼠标'].X, 0, _G['鼠标'].Y) - Frame.Position

                    for i, v in pairs(workspace.PlayerModels:GetChildren()) do
                        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G['菜单']['传送的玩家'] and
                            v:FindFirstChild("WoodSection") then
                            local screenpos, visible = game.Workspace.CurrentCamera:WorldToScreenPoint(v.WoodSection
                                                                                                           .CFrame.p)
                            if visible then
                                if _G['在框内'](screenpos, Frame) then
                                    if not v:FindFirstChild("SelectionBox") then
                                        local SB = Instance.new("SelectionBox", v)
                                        SB.LineThickness = 0.05
                                        SB.Adornee = v

                                    end
                                end
                            end
                        end
                        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G['菜单']['传送的玩家'] and
                            v:FindFirstChild("DraggableItem") or v:FindFirstChild("PurchasedBoxItemName") then
                            local screenpos, visible = game.Workspace.CurrentCamera:WorldToScreenPoint(v.Main.CFrame.p)
                            if visible then
                                if _G['在框内'](screenpos, Frame) then
                                    if not v:FindFirstChild("SelectionBox") then
                                        local SB = Instance.new("SelectionBox", v)

                                        SB.LineThickness = 0.05
                                        SB.Adornee = v
                                    end
                                end
                            end
                        end
                    end
                end
            end
            Frame.Size = UDim2.new(0, 1, 0, 1)
            Frame.Visible = false

        end)

    else
        Frame.Visible = false
        _G['菜单']['物品框']:Disconnect()
        _G['菜单']['物品框'] = nil
    end
end)
Section:Button("Deselect All Item", function()
    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G["菜单"]["传送的玩家"] then
            if v:FindFirstChild("SelectionBox") then
                v:FindFirstChild("SelectionBox"):Destroy()
            end
        end
    end
end)

Section = Tab:Section("Item")
Section:Button("Tp All Selected Item", function()
    if not game.Workspace:FindFirstChild("darkx") then
        return _G['提醒']('Please Set Position')
    end
    _G['传送的东西'] = {}
    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do

        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G["菜单"]["传送的玩家"] then
            if v:FindFirstChild("SelectionBox") then
                if not v.PrimaryPart then
                    v.PrimaryPart = v:FindFirstChildOfClass "Part"
                end

                v.PrimaryPart.Anchored = true
                table.insert(_G['传送的东西'], v)

            end
        end
    end

    _G['菜单']['传送停止'] = false
    local oldpos = _G['自己的方块'].CFrame
    _G["菜单"]["飞行"] = true
    spawn(function()
        _G['飞行'](true)
    end)
    _G['穿墙'](true)
    _G['旧的飞行速度'] = _G['菜单']['飞行速度']
    _G['菜单']['飞行速度'] = 0

    for i, v in next, _G['传送的东西'] do
        if _G['菜单']['传送停止'] == true then
            break
        end

        v:FindFirstChild("SelectionBox"):Destroy()
        if v:FindFirstChild('TreeClass') then
            _G['传送'](CFrame.new(v.PrimaryPart.CFrame.p))
        else
            _G['传送'](CFrame.new(v.PrimaryPart.CFrame.p) + Vector3.new(0, v.PrimaryPart.Size.Y * 3, 0))
        end

        local old = v.PrimaryPart.CFrame
        v.PrimaryPart.Anchored = false
        game.ReplicatedStorage.TestPing:InvokeServer();
        for i = 1, 10 do
            for i = 1, 6, 4 do
                _G['拉东西']:FireServer(v);
                game:GetService 'RunService'.Stepped:wait();
            end
            if v:FindFirstChild("WoodSection") then
                if _G['木头竖着传送'] then
                    v:PivotTo(game.Workspace.darkx.CFrame)
                else
                    v:PivotTo(game.Workspace.darkx.CFrame * CFrame.Angles(-90, 0, 90))
                end

            else
                v:PivotTo(game.Workspace.darkx.CFrame)
            end
            game.ReplicatedStorage.TestPing:InvokeServer();
            if (v.PrimaryPart.CFrame.p - old.p).magnitude > 5 or
                (v.PrimaryPart.CFrame.p - game.Workspace.darkx.CFrame.p).magnitude < 5 then
                break
            end
            task.wait();
        end

    end

    _G['传送'](oldpos)
    _G["菜单"]["飞行"] = false
    spawn(function()
        _G['飞行'](false)
    end)
    _G['穿墙'](false)
    _G['菜单']['飞行速度'] = _G['旧的飞行速度']

end)
Section:Toggle("Standing Wood", false, function(Value)
    _G['菜单']['木头竖着传送'] = Value
end)
Section:Button("Abort", function()
    _G['菜单']['传送停止'] = true
end)

Section = Tab:Section("Box Sort")
Section:TextBox("X", "5", function(s)
    _G['菜单']['整理物品X'] = tonumber(s)
end)
Section:TextBox("Z", "5", function(s)
    _G['菜单']['整理物品Z'] = tonumber(s)
end)
Section:Button("Start", function()
    local box, itemnname, wood = {}, {}, {}
    local SelectedItem
    local itemname = false
    if _G['菜单']['正在整理物品'] == true then
        return _G['提醒']('you are using this feature')
    end
    _G['菜单']['正在整理物品'] = true
    local oldpos = _G['自己的方块'].CFrame

    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and tostring(v.Owner.Value) == _G["菜单"]["传送的玩家"] and
            v:FindFirstChild("SelectionBox") then
            if v:FindFirstChild("ItemName") then
                if not table.find(itemnname, v.ItemName.Value) then
                    table.insert(itemnname, v.ItemName.Value)
                end
            elseif v:FindFirstChild("PurchasedBoxItemName") then
                if not table.find(box, v.PurchasedBoxItemName.Value) then
                    table.insert(box, v.PurchasedBoxItemName.Value)
                end
            elseif v:FindFirstChild("TreeClass") then

                if not table.find(wood, v.TreeClass.Value) then
                    table.insert(wood, v.TreeClass.Value)
                end

            end
        end
    end

    for i, v in next, box do

        _G['盒子传送'](v, _G['菜单']['整理物品X'], _G['菜单']['整理物品Z'], "PurchasedBoxItemName")
        task.wait()
    end
    for i, v in next, itemnname do

        _G['盒子传送'](v, _G['菜单']['整理物品X'], _G['菜单']['整理物品Z'], "ItemName")
        task.wait()
    end
    for i, v in next, wood do
        _G['盒子传送'](v, _G['菜单']['整理物品X'], _G['菜单']['整理物品Z'], "TreeClass")
        task.wait()
    end
    _G['传送'](oldpos)
    _G['菜单']['正在整理物品'] = false

end)

Section:Button("Abort", function()
    _G['菜单']['停止整理'] = true
    finished = true
    _G['自己身体'].PlatformStand = false
    game:GetService "Workspace":FindFirstChild "preview":Destroy()
    pcall(function()
        _G['整理鼠标移动']:Disconnect()
        _G['整理鼠标移动'] = nil

    end)
    pcall(function()

        _G["菜单"]["飞行"] = false
        spawn(function()
            _G['飞行'](false)
        end)

        _G['菜单']['飞行速度'] = _G['旧的飞行速度']
        _G['穿墙'](false)
        _G['整理鼠标点击']:Disconnect()
        _G['整理鼠标点击'] = nil
    end)
    pcall(function()
        _G['菜单']['正在整理物品'] = false
        game:GetService('Workspace').CurrentCamera.CameraSubject = _G['自己身体']

    end)

end)
_G['修改汽车的属性'] = function(va, name)
    for i, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == _G['自己'] then
            if v:FindFirstChild("Type") and v.Type.Value == "Vehicle" then
                if v:FindFirstChild("Configuration") then
                    v.Configuration[name].Value = va
                end
            end
        end
    end
end
Tab = lib:CreateTab("Vehicle", "6034754441")
Section = Tab:Section("Vehicle")

Section:Slider("Vehicle Speed", 1, 1, 5, false, function(s)
    _G['修改汽车的属性'](s, "MaxSpeed")

end)
Section:Slider("Steer Angle", 0.7, 0.7, 5, true, function(s)
    _G['修改汽车的属性'](s, "SteerAngle")

end)
Section:Button("Flip Vehicle", function()
    if not _G['自己身体'].SeatPart and _G['自己身体'].SeatPart ~= "DriveSeat" then
        _G['提醒']("You need to sit in the vehicles driver seat")
        return
    end
    _G['自己身体'].SeatPart.Parent:PivotTo(_G['自己身体'].SeatPart.Parent.PrimaryPart.CFrame *
                                                   CFrame.Angles(math.rad(-180), 0, 0) + Vector3.new(0, 5, 0))
end)
Section = Tab:Section("Vehicle Spawner")
Section:DropDown("Select Color",
    {"Medium stone grey", "Sand green", "Sand red", "Faded green", "Dark grey metallic", "Dark grey", "Earth yellow",
     "Earth orange", "Silver", "Brick yellow", "Dark red", "Hot pink"}, false, false, function(Value)
        _G['菜单']['汽车的颜色'] = Value
    end)

Section:Button('Start Vehicle Spawner', function()

    if _G['菜单']['正在生成车'] == true then
        return _G['提醒']("you are using this feature")
    end
    if _G['菜单']['汽车的颜色'] == nil then
        return _G['提醒']("No car color selected")
    end
    _G['提醒']("Click a spawn pad")
    _G['菜单']['停止生成车'] = false
    _G['生成成功'] = false
    _G['汽车生成检测'] = game:GetService("Workspace").PlayerModels.ChildAdded:connect(function(v)
        if v:WaitForChild("Owner") and v.Owner.Value == _G['自己'] then
            if v:WaitForChild("PaintParts") then
                if v.PaintParts:WaitForChild("Part").BrickColor.Name == _G['菜单']['汽车的颜色'] then
                    _G['生成成功'] = true
                end
            end
        end
    end)
    local carclick
    _G['菜单']['正在生成车'] = true
    _G['选择的汽车'] = nil
    carclick = _G["鼠标"].Button1Up:Connect(function()
        if _G["鼠标"].Target.Parent.Owner.Value == _G['自己'] then
            if _G["鼠标"].Target.Parent.Type.Value == "Vehicle Spot" then
                _G['选择的汽车'] = _G["鼠标"].Target

            end
        end
    end)
    repeat
        wait()

    until _G['选择的汽车'] ~= nil
    repeat
        if _G['菜单']['停止生成车'] then
            _G['提醒']("Aborted")
            break
        end
        game:GetService("ReplicatedStorage").Interaction.RemoteProxy:FireServer(_G['选择的汽车'].Parent.ButtonRemote_SpawnButton)
        task.wait(1)
    until _G['生成成功'] == true
    carclick:Disconnect()
    _G['汽车生成检测']:Disconnect()
    if not _G['菜单']['停止生成车'] then
        _G['提醒']("Finished spawning vehicle")
    end
    _G['菜单']['正在生成车'] = false
end)
Section:Button('Abort', function()
    _G['菜单']['停止生成车'] = true
end)

_G['填充所有蓝图'] = function()
    for _, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild('Owner') and v:FindFirstChild('WoodSection') then
            if v.Owner.Value == _G['自己'] and tostring(v.TreeClass.Value) == _G['菜单']['自动填充的树'] then
                for _, x in next, game:GetService("Workspace").PlayerModels:GetChildren() do
                    if x:FindFirstChild('Owner') and x:FindFirstChild('Main') and x:FindFirstChild('Type') and x.Type.Value=='Blueprint' then

                        if x.Owner.Value == _G['自己'] then
                            local oldpos = _G['自己的方块'].CFrame
                            _G['传送'](v.WoodSection.CFrame)
                            for i = 1, 10, 1 do
                                _G['拉东西']:FireServer(v)
                                v.WoodSection.CFrame = x.BuildDependentWood.CFrame
                                task.wait()
                            end
task.wait(1)
                            _G['传送'](oldpos)
                        end
                    end
                end
            end
        end
    end
end
_G['油漆']=function(blueprint)
    if _G['菜单']['自动填充的树']==nil then
        return _G['提醒']('select Wood At First')
    end
    local oldpos=_G['自己的方块'].CFrame

    _G['蓝图名字'] = blueprint.ItemName.Value
    _G['木头大小']=nil
    for i, v in next,game:GetService("ReplicatedStorage").ClientItemInfo:GetChildren() do
        if v.Name == _G['蓝图名字'] then
            for i, v in next,v:GetChildren() do
                if v.Name == "WoodCost" then
                    _G['木头大小'] = v.Value
                end
            end
        end

    end
    if _G['自己'].SuperBlueprint.Value then
        _G['木头大小'] = 1
    end
    _G['斧头'], _G['伤害'] = _G['检查斧头'](tonumber( _G['菜单']['自动填充的树']))
    if not _G['伤害'] then
        return _G['提醒']('you need one axe')
    end
    _G['木头的大小']=nil
    _G['选择的木头']=nil
    for i, v in next,game.Workspace:GetChildren() do
        if v.Name == 'TreeRegion' then
            for i, v in next,v:GetChildren() do
                if v:FindFirstChild('WoodSection') and
                    v:FindFirstChild('TreeClass') then
                    if v:FindFirstChild('TreeClass').Value == _G['菜单']['自动填充的树'] then
                        for i, v in next,v:GetChildren() do
                            if v.Name == 'WoodSection' then
                                local Size = v.Size.X * v.Size.Y * v.Size.Z
                                if (Size >     _G['木头大小']) and (#v.ChildIDs:GetChildren() == 0) then
                                    if  v.Size.X< 9e9 then
                                        _G['木头的大小'] = v.Size.X
                                        _G['选择的木头'] = v
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    if not   _G['选择的木头'] or not _G['木头的大小'] then
        
        return _G['提醒']('Not Find  right tree')
    end 
_G['加入的木头']=nil
    _G['加入的树'] = game.Workspace.LogModels.ChildAdded:connect(function(v)
        v:WaitForChild('Owner')

        if v.Owner.Value == _G['自己'] and v.TreeClass.Value == _G['菜单']['自动填充的树'] and v:FindFirstChild("WoodSection") then
            _G['加入的木头'] = v

        end
    end)
   _G['砍的地方']= _G['木头大小'] / (_G['选择的木头'].Size.X *_G['选择的木头'].Size.X) + 0.01

   repeat game["Run Service"].Heartbeat:wait()
    _G['传送'](_G['选择的木头'].CFrame + Vector3.new(4, 2, 2))
   _G["砍"](_G['选择的木头'].Parent.CutEvent , _G["斧头"],_G['选择的木头'].ID.Value,_G['选择的木头'].Size.Y -    _G['砍的地方'], _G["伤害"] )
until    _G['加入的木头'] ~=nil
pcall(function()
    _G['加入的树']:Disconnect()
_G['加入的树']=nil
end)

_G['填充完成']=false
_G['检测是否成功'] = game.Workspace.PlayerModels.ChildAdded:Connect(function(v)
 v:WaitForChild("Owner")
    if v.Owner.Value ==_G['自己'] and v:FindFirstChild("Type") and v.Type.Value == "Structure" then
        if v:FindFirstChild("BlueprintWoodClass") then
            _G['填充完成']=true
        end
        end
    end)

_G['木板加入']=game:GetService("Workspace").PlayerModels.ChildAdded:connect(function(v)
v:WaitForChild('Owner')
if v:FindFirstChild('Owner') and v.Owner.Value==_G['自己'] and v:FindFirstChild('WoodSection') then
    _G['传送'](v.WoodSection.CFrame+Vector3.new(0,6,0))
    repeat task.wait()
        
    until v:FindFirstChild("TreeClass") 
    repeat task.wait()
        _G['拉东西']:FireServer(v)
     v:PivotTo(blueprint.BuildDependentWood.CFrame)
        _G['拉东西']:FireServer(v)
    until  _G['填充完成']==true
   
  
end
end)
repeat 
    
    _G['拉东西']:FireServer(_G['加入的木头'] )
    _G['加入的木头'] :PivotTo(_G['菜单']['油漆的锯木机'].Particles.CFrame)
    _G['拉东西']:FireServer(_G['加入的木头'] )
    task.wait(2)
until  _G['加入的木头'].Parent==nil

repeat task.wait()
    
until   _G['填充完成']==true
pcall(function()
    _G['木板加入']:Disconnect()
_G['木板加入']=nil
_G['检测是否成功']:Disconnect()
_G['检测是否成功']=nil
end)
_G['提醒']('done')
_G['传送'](oldpos)
end
Tab = lib:CreateTab("AutoBuild", '6034281908')
Section = Tab:Section("Auto Filler")
Section:DropDown("Select Wood Type",
{'Generic', 'GoldSwampy', 'CaveCrawler', 'Cherry', 'Frost', 'Volcano', 'Oak', 'Walnut', 'Birch', 'SnowGlow', 'Pine',
'GreenSwampy', 'Koa', 'Palm', 'LoneCave', 'Spooky', 'SpookyNeon'}, false, false, function(Value)
        _G['菜单']['自动填充的树'] = Value
    end)

_G['自动填充'] = false
Section:Toggle("Auto Build Loops", false, function(Value)

    _G['自动填充'] = Value

    while task.wait()  do
        if _G['自动填充']==true then
            _G['填充所有蓝图']()
        end
        
    end

end)
Section:Button("Fill All blueprint", function()
    _G['填充所有蓝图']()
end)

Section:Toggle("Click to Fill", false, function(Value)

    if Value then
        _G['点击蓝图'] = _G["鼠标"].Button1Up:Connect(function()
            if _G["鼠标"].Target.Parent.Owner.Value == _G['自己'] and
                _G["鼠标"].Target.Parent:FindFirstChild("Type") and _G["鼠标"].Target.Parent.Type.Value ==
                "Blueprint" then

                for _, v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
                    if v:FindFirstChild('Owner') and v:FindFirstChild('WoodSection') then
                        if v.Owner.Value == _G['自己'] and tostring(v.TreeClass.Value) ==
                            _G['菜单']['自动填充的树'] then

                            local oldpos = _G['自己的方块'].CFrame
                            _G['传送'](v.WoodSection.CFrame)
                            for i = 1, 10, 1 do
                                _G['拉东西']:FireServer(v)
                                v.WoodSection.CFrame = _G["鼠标"].Target.Parent.BuildDependentWood.CFrame
                                task.wait()
                            end

                            _G['传送'](oldpos)

                        end
                    end
                end

            end
        end)
    else
        _G['点击蓝图']:Disconnect()
        _G['点击蓝图']=nil
    end

end)
Section = Tab:Section("Paint")
Section:Button('Click To Select Sawmill', function()
    local saw
    _G['提醒']('Click one  Sawmill')
    local clicked = _G["鼠标"].Button1Up:Connect(function()
        wait()
        local obj = _G["鼠标"].Target.Parent
        if obj:FindFirstChild('Settings') and obj.Settings:FindFirstChild('DimZ') then
            saw = obj
            _G['提醒']('Sawmill Selected')
        elseif obj.Parent:FindFirstChild('Settings') and obj.Parent.Settings:FindFirstChild('DimZ') then
            saw = obj.Parent
            _G['提醒']('Sawmill Selected')
    
        end
    
    
    
    end)
    repeat
        task.wait(0.1)
    until   saw ~= nil
    _G['菜单']['油漆的锯木机']=saw

    clicked:Disconnect()
    clicked = nil
end)

Section:Toggle("Paint Tool", false, function(Value)
if  _G['菜单']['油漆的锯木机']==nil then
    return _G['提醒']['select Sawmail At First']
end
    if Value then
        _G['点击蓝图'] = _G["鼠标"].Button1Up:Connect(function()
            if _G["鼠标"].Target.Parent.Owner.Value == _G['自己'] and
                _G["鼠标"].Target.Parent:FindFirstChild("Type") and _G["鼠标"].Target.Parent.Type.Value ==
                "Blueprint" then

                    _G['油漆'](_G["鼠标"].Target.Parent)

            end
        end)
    else
        _G['点击蓝图']:Disconnect()
        _G['点击蓝图']=nil
    end

end)
Tab = lib:CreateTab("Settings", "6031280882")
Section = Tab:Section("UI")

Section:KeyBind("Hide Gui", "RightShift", function(Value)
    library:ToggleUI()
end)
local scr1=getsenv(_G['自己'].PlayerGui.LoadSaveGUI.LoadSaveClient)
scr1.setPlatformControls=function()end
scr1.toggleWindow()

game.ReplicatedStorage.TestPing:InvokeServer();
scr1.back()
